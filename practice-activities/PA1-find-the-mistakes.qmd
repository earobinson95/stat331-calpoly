---
title: "PA 1: Find the Mistakes"
subtitle: "Working with R Objects"
author: "YOUR NAME "
format: html
embed-resources: true
execute:
  echo: true
  error: true
---

```{r, setup}
#| include: false
library(tidyverse)
```

Today you will be creating and manipulating vectors, lists, and data frames to uncover a top secret message.

Some advice:

+ Work with those around you.

+ Google is your friend!  If an error is confusing, copy it into Google and see what other people are saying.  If you don't know how to do something, search for it.

+ Just because there is no error message doesn't mean everything went smoothly. Use the console to check each step and make sure you have accomplished what you wanted to accomplish.

## Access

You can access PA1: Find the Mistakes one of two ways:

1. Click [here](https://posit.cloud/content/5172799) to access a Posit Cloud project.
  + Note: if you do not have a Posit Cloud account, you will be asked to create one.
  + Make sure to save a permanent copy!

2. If you have already [installed R and RStudio (+Quarto)](https://earobinson95.github.io/stat331-calpoly-text/01-introduction.html#checkin3-install), you can download the [practice activity template here](PA1-find-the-mistakes.qmd).
  + Make sure to move this from your `Downloads` into your `stat331/practice-activities` folder!

## Part One: Setup

Each of the following R chunks will cause one or more errors and / or do the desired task incorrectly.  Find the mistake, and correct it to complete the intended action.

1. Create vectors containing the upper case letters, lower case letters, and some punctuation marks.

```{r}
lower_case <- c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
                "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z")

upper_case <- c("A", "B", "C", "D", "E", "F", "G", "H" "I", "J", "K", "L", "M",
                "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z")

punctuation <- c(".", ",", "!", "?", "'", """, "(", ")", " ", "-", ";", ":")
```

2. Make **one** long **vector** containing all the symbols.

```{r}
my_symbols <- cbind(lower_case, upper_case, punctuation)
```

3. Turn the `my_symbols` vector into a data frame, with one column named 
"Symbol".

```{r}
my_symbols <- dataframe(Symbol = my_symbols)
```


4. Find the total number of symbols we have in our data frame.  

```{r}
len <- length(my_symbols)
```


5. Create a new variable in your dataframe that assigns a number to each symbol.

```{r}
my_symbols%Num <- 1:len
```


## Part Two: Decoding the secret message.

This chunk will load up the encoded secret message as a vector.

```{r}
#| message: false
top_secret <- read_csv('https://raw.githubusercontent.com/earobinson95/stat331-calpoly/master/practice-activities/data/PA1-secret-code.csv')$X1
```

By altering this top secret set of numbers, you will be able to create a message. Write your own code to complete the steps, **in the order given** below.

**Hint:** To update a vector after performing an operation, you *overwrite* the existing object with its updated counterpart. This looks something like this:

`x <- x + 12`,

where the original value(s) in `x` have had 12 added to them, and the resulting values are put back in to the object named `x`.

*Be careful not to* **overwrite** *more than you intend. If this happens, go back and re-read in the top secret message and any subsequent code chunks to start fresh with the top_secret vector.*

+ Add 14 to every number (completed for you!)

```{r}
## Code completed for you
top_secret <- top_secret + 14
```

1. Multiply every number by 18, then subtract 257 (watch your order of operations!)

```{r}
## Code to carry out step 1.

```

2. Use the `exp()` function to exponentiate every number.

```{r}
## Code to carry out step 2.

```

3. Square every number.

```{r}
## Code to carry out step 3.

```

**Checkpoint:** Headquarters has informed you that at this stage of decoding, there should be 352 numbers in the secret message that are below 17. The code below verifies that this is true for your `top_secret` object!

*Hint:* This is what is called a "relational" comparison, where you compare an object to a number and R will give you a vector of `TRUE`s and `FALSE`s based on whether the comparison is / is not met. You can then use these `TRUE`s and `FALSE`s as numbers, since `TRUE = 1` and `FALSE = 0` in R land. This is called a Boolean variable type.

```{r}
# Write code to verify that there are 352 numbers with values **below** 17

```

Next, carry out the following steps: 

4. Turn your vector of numbers into a matrix called `top_secret` with 5 columns.

```{r}
# Write code to carry out step 4.

```

5. Separately from your top secret numbers, create a vector of all the even numbers between 1 and 382. Name it `evens`. That is, `evens` should contain 2, 4, 6, 8 ..., 382.

```{r}
# Write code to carry out step 5.

```

6. Subtract the `evens` vector from the first column of your top_secret message matrix.

```{r}
# Write code to carry out step 6. Don't forget to 'overwrite' your top_secret object.

```

7. Subtract 100 from all numbers 18-24th rows of the 3rd column of your secret message matrix.

```{r}
# Write code to carry out step 7. Remember to overwrite!

```

8. Multiply all numbers in the 4th and 5th column of your secret message matrix by 2.

```{r}
## Write code to carry out step 8.

```

9. Turn your secret message matrix back into a vector.

```{r}
# Write code to carry out step 9.
```

**Checkpoint:** Headquarters has informed you that at this stage of decoding, all numbers in indices 500 and beyond are below 100. The code below verifies that this is true for your `top_secret` object! 

*Hint:* Use a relational comparison similar to what you used in the last checkpoint, but here you will need to subset values from your vector! It may be helpful to think of below 100 as **not** equal to or greater than 100.


```{r}
# Write code to verify that indices 500 and beyond have values **below** 100
# should be 0!

```

10. Take the square root of all numbers in indices 38 to 465.

```{r}

```

11. Use the `round()` function to round all numbers to the nearest whole number.

```{r}

```

12. Replace all instances of the number 39 with 20. 

**Hint:** This step requires another relational comparison, but this time it is equality. Equality in R is checked with a double equal sign rather than a single equal sign!

```{r}

```

**Checkpoint:** Headquarters has informed you that your final message should have 344 even numbers.

*Hint:* Checking for divisibility is an interesting operation that isn't done much in R. Modulus is the operation you are interested in, where you are checking for whether the numbers are divisible by 2, with no remainder. See what you can find about modulus in R!

```{r}
# Code to verify how many even numbers are in your top_secret vector
# Should be 344!

```

## Part Three: The secret message!

Use your final vector of numbers as indices for `my_symbols` to discover the final message, by running the following code:

```{r}
stringr::str_c(my_symbols$Symbol[top_secret], collapse = "")
```

Google the first line of this message, if you do not recognize it, to see what poem it is. Make sure to submit the poem name to the Canvas Quiz!

