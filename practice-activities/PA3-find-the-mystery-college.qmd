---
title: "PA 3: Identify the Mystery College üè´"
subtitle: "Data Wrangling with dplyr"
format: 
  html:
    self-contained: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

Today you will be using the dplyr package to clean a data set and then using that cleaned dataset to figure out what college Ephelia has been accepted to.

[Download starter .qmd file](PA3-find-the-mystery-college.qmd)

::: callout-caution
Make sure you move your .qmd file from your downloads into your Stat 331 directory -- you should be working in your R project! **DO NOT** open it straight from download.
:::

::: {.callout-tip collapse="true"}

## Dealing with errors

As you work through this PA, you will encounter some code that does not work as you want it to. Don't despair! Errors (when R is unable to run your code) and bugs (when the code doesn't do what you hoped) are a natural part of coding. Even the best of the best deal with these problems regularly - learning to track down the issue is a skill that you can learn and practice.

**Errors can be sneaky - check results *often***

If a chunk of code runs smoothly without giving you any error or warnings this **does not** necessarily mean it accomplished the desired task.

It is a good habit to check the results of your code **every time** you finish a task. In general, I would recommend completing the following tasks **every time** you write a code chunk.

-   Include a comment at the beginning of the code chunk that briefly states what the purpose of the chunk is. Comments in the code chunks come after `#` signs. These comments will remind later readers---which might be your future self!---what the desired output of the code chunk is.

-   If you created a new object, take a look at it! You can inspect the object by either clicking its name in your *Environment* tab or by typing its name into the console. Make sure it looks about how you expect. **Do not** type code to inspect the object in your Quarto file, as that **is not** code that needs to be saved!

-   If you created or updated a data frame, make sure your edits did what you hoped. Use the *Environment* or the `head()` function to investigate your changes.

**Two heads are better than one**

It can be hard to spot bugs in code that you wrote.

Work with those around you - if something goes wrong, ask a friend or team member to take a peek at your code and see if any glaring errors (like *syntax error*) pop out.

**Explain your code out loud**

The best way to troubleshoot a sneaky but is to explain out loud each step of your code, and what you hoped to accomplish.

Meet up with classmates to have everyone talk through their code.

If you are alone, try [Rubber Duck Debugging](https://en.wikipedia.org/wiki/Rubber_duck_debugging)!

**Google is your friend**

The whole of the internet is at your disposal! Use it early, use it often.

Some tricks:

-   Copy-paste the exact error message into Google. Chances are, somebody else had a similar problem and got a similar message.

-   Include package names in your search terms. For example, "bar plot in ggplot" is a better search than "bar plot in R".

:::


# Part One: Data import and cleaning

This section will clean today's data set, so that you can use it more easily in Part Two.

## Data download & packages

First, we declare our package dependencies and load the data.

::: callout-warning
The data loading function `read_csv()` will give you an outpouring of helpful information about the data set. If you do not see the word "error", there is nothing to be concerned about.
:::

```{r setup}
#| warning: false
#| message: false

library(tidyverse)
colleges <- read_csv("https://raw.githubusercontent.com/earobinson95/stat331-calpoly/master/practice-activities/data/colleges.csv")
str(colleges, give.attr = FALSE)
```

## Data cleaning

Now we will clean the data. Alas, each of the R chunks in this section will cause an error and / or do the desired task incorrectly. Even the chunks that run without error **are not** correct! You will need to find the mistake and correct it to complete the intended action.

**Step 1:** There are too many variables in this data set. We don't need all of them. Narrow your data set down to only:

-   `INSTNM` Name of the institution
-   `CITY` City, `STABBR` State, and `ZIP` ZIP code of the institution
-   `ADM_RATE` The Admissions Rate
-   `SAT_AVG` The average SAT score
-   `UGDS` The number of undergraduate students
-    The `TUITIONFEE_IN` in and `TUITIONFEE_OUT` out of state tuition
-   `CONTROL` Whether the school is public or private
-   `REGION` The region of the school.

```{r select-vars}
colleges_clean <- colleges | >  
  select(INSTNM, CITY, STABBR, ZIP,
         ADM_RATE, SAT_AVG, UGDS,
         TUITIONFEE_IN, TUITIONFEE_OUT,
         CONTROL, REGION) 
```

**Step 2:** Remove the schools that are private (category 2) and for-profit (category 3), keeping only public schools (category 1).

```{r filter-private-profit}
colleges_clean <- colleges_clean |> 
  filter(CONTROL == 1, CONTROL == 2) 
```

**Step 3:** Adjust the appropriate variables to be numeric -- `as.numeric()`.

```{r mutate-numeric}
colleges_clean <- colleges_clean |> 
  mutate(
    TUITIONFEE_IN  = numeric(TUITIONFEE_IN),
    TUITIONFEE_OUT = numeric(TUITIONFEE_OUT),
    SAT_AVG        = numeric(SAT_AVG),
    UGDS           = numeric(UGDS),
    ADM_RATE       = numeric(ADM_RATE)
    ) 
```

**Step 4:** Adjust the appropriate variables to be factors -- `as.factor()`.

::: callout-note
We will talk more about special data types (including factors) in a few weeks. 
:::

```{r mutate-factor}
colleges_clean |>
  mutate(
    CONTROL = as.character(CONTROL),
    REGION  = as.character(REGION)
)
```

**Step 5:** Create a new variable called `TUITION_DIFF` which contains the difference between out of state and in state costs.

```{r mutate-differences}
colleges_clean <- colleges_clean |> 
    TUITION_DIFF = TUITIONFEE_OUT - TUITIONFEE_IN
```

**Step 6:** Remove every row with missing data.

::: callout-warning
This is not always a great idea! Usually, even if *some* of the information is missing, we don't want to throw out the entire row. This time, however, we'll be lazy.
:::

```{r drop-na}
colleges_clean <- colleges_clean |> 
  drop.na()
```

Lastly, notice that each of these steps started with

```{r all-together}
#| eval: false

colleges_clean <- colleges_clean |> ...
```

That is pretty redundant! Instead, we could perform all these tasks as one long "pipeline."

**Step 7:** Combine your (fixed) code chunks into a **single** code chunk that carries out all of the steps necessary to clean the data.

::: callout-tip
Think about coding efficiency -- you **should not** have multiple calls to the **same** function!
:::

```{r combine}
# Code combining ALL of your previous steps into ONE pipeline


```

# Part Two: Identify the mystery college

Wow! Your best friend Ephelia has been accepted to her top choice college! Unfortunately, Ephelia is a very mysterious person, and she won't tell you directly which college this is. You'll have to use her clues to figure out which school is her dream school.

**Clues:**

1.  This college is located in Region 4.

2.  This college's admission rate is below the median rate for the region.

3.  This college **does not** charge the same for in- and out-of-state tuition.

4.  The average SAT score of this college is an odd number.

5.  This college is in the state where hot-dish, "you betcha", and hockey are a thing.

6.  Less than 10,000 undergraduates attend this college.

7.  The in state tuition cost to attend this college is **not more** than $10,000.

8.  Of the two options remaining at this step, Ephelia will attend the college that has the higher admission rate.

```{r identify-college}
# Code to solve for the mystery college using the 8 clues above.

```

Submit the college Ephelia will attend to the Canvas Quiz.
