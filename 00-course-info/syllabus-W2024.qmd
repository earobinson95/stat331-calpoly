---
title: "Stat 331/531: Statistical Computing with R"
subtitle: "Winter 2024"
format: 
  html:
    self-contained: true
    toc: true
  pdf:
    keep-tex: false
    latex-engine: xelatex
fontfamily: mathpazo
fontsize: 11pt
---

```{r}
#| include: false
library(tidyverse)

# Create a calendar for your syllabus ----
# Source: http://svmiller.com/blog/2020/08/a-ggplot-calendar-for-your-semester/
# Format: YYYYMMDD

# What are the full dates of the semester?
semester_dates <- seq(ymd(20240107), ymd(20240323), by = 1)

# Weekday(s) of class
class_wdays <- c("Tue", "Thu")

# Breaks
not_here_dates <- c(
  ymd("20240115"),
  ymd("20240219")
  # Break
  # seq(ymd(20221017), ymd(20221018), by = 1)
  )

# Dates of Exams
exam_dates <- c(ymd(20240215), 
                ymd(20240321)
                )
finals_week <- seq(ymd(20240318), ymd(20240323), by = 1)

# Custom function for treating the first day of the month as the first week 
# of the month up until the first Sunday 
# (unless Sunday was the start of the month)
wom <- function(date) {
    first <- wday(as.Date(paste(year(date), month(date), 1, sep = "-")))
    return((mday(date) + (first - 2)) %/% 7 + 1)
}

# Create a data frame of dates, assign to Cal
Cal <- tibble(date = seq(ymd(20240101), ymd(20240331), by = 1))  |> 
  mutate(mon      = lubridate::month(date, label = T, abbr = F),
         wkdy     = weekdays(date, abbreviate = T),
         wkdy     = fct_relevel(wkdy, "Sun", "Mon", "Tue", "Wed", "Thu","Fri", "Sat"), # make sure Sunday comes first
         semester = date %in% semester_dates, 
         # project = date %in% project_dates,
         exams    = date %in% exam_dates, # is it an exam?
         not_here = date %in% not_here_dates, # is it a day off?
         exam_wk  = date %in% finals_week,
         day      = lubridate::mday(date), 
         week     = wom(date)
         ) |> 
  mutate(category = case_when(# project ~ "Project",
                              exams ~ "Exam",
                              not_here ~ "Cal Poly Holiday",
                              wkdy %in% class_wdays & !not_here & !exam_wk & date != "2024-01-16" & date %in% semester_dates ~ "Class Day",
                              semester ~ "Finals",
                              TRUE ~ "NA")
         )

class_cal <- Cal |> 
  ggplot(aes(wkdy, week)) +
  theme_bw() +
  theme(aspect.ratio = 1, 
        panel.grid.major.x = element_blank(),
        legend.position = "right",
        legend.title = element_blank(),
        axis.title.y = element_blank(), 
        axis.title.x = element_blank(),
        axis.ticks.y = element_blank(), 
        axis.text.y = element_blank()) +
  geom_tile(alpha = 0.8, 
            aes(fill = category), 
            color="black", 
            linewidth = 0.45
            ) +
  facet_wrap(~ mon, scales = "free", ncol=3) +
  geom_text(aes(label = day, color = semester & (!not_here))) +
  # put your y-axis down, flip it, and reverse it
  scale_y_reverse(breaks = NULL) +
  # manually fill scale colors to something you like...
  scale_color_manual(values = c("FALSE" = "grey80", "TRUE" = "black"), guide = "none") + 
  scale_fill_manual(values=c("Class Day"="steelblue", 
                             "Finals"="white",
                             "Cal Poly Holiday" = "grey10",
                             "NA" = "white", # I like these whited out...
                             "Exam"="orange3"),
                    #... but also suppress a label for a non-class semester day
                    breaks=c("Finals", "Cal Poly Holiday", "Class Day","Exam"))
# class_cal

exam_days <- Cal |> 
  filter(category == "Exam") |> 
  mutate(topic = c("Midterm Exam", 
                   "Final Exam"
                   )
         ) |> 
  rowwise() |> 
  mutate(sem_week = week(date),
         Date = paste(format(date, "%b %e"), sep = ",", collapse = ", "))

class_days <- Cal |> 
  filter(date %in% semester_dates,
         category %in% c("Class Day")
         ) |> 
  mutate(sem_week = week(date)) |> 
  group_by(sem_week) |> 
  # group_by(sem_week) |> 
  summarize(Date = paste(format(date, "%b %e"), sep = ",", collapse = ", ")) |> 
  mutate(topic = c(
    "Introduction to R",
    "Tidy Data + Basics of Graphics",
    "Data Cleaning and Manipulation (dplyr)",
    "Data Transformations + Factors (tidyr + forcats)",
    "Special Data Types (stringr + lubridate)",
    "Version Control (Git/GitHub)",
    "Functions",
    "Functional Programming (purrr)",
    "Simulation",
    "Final Project")) |> 
  # bind_rows(project_days) |> 
  bind_rows(exam_days) |> 
  arrange(sem_week) |> 
  select(Date, Topic = topic)


# Weekday(s) of office hours
officehr_wdays <- c("Mon", "Wed", "Thu")

# Create a data frame of dates, assign to Cal
Cal2 <- tibble(date = seq(ymd(20240107), ymd(20240113), by = 1))  |> 
  mutate(mon      = lubridate::month(date, label = T, abbr = F),
         wkdy     = weekdays(date, abbreviate = T),
         wkdy     = fct_relevel(wkdy, "Sun", "Mon", "Tue", "Wed", "Thu","Fri", "Sat"), # make sure Sunday comes first
         week     = wom(date),
         classday = wkdy %in% class_wdays,
         officehrday = wkdy %in% officehr_wdays,
         officehrtime = c(NA, "3:10-4:00pm", NA, "1:10-2:00pm", "2:30-3:30pm", NA, NA)
  )


classday_cal <- Cal2 |> 
  ggplot(aes(wkdy, week)) +
  theme_bw() +
  theme(aspect.ratio = 0.15, 
        panel.grid.major.x = element_blank(),
        legend.position = "right",
        legend.title = element_blank(),
        axis.title.y = element_blank(), 
        axis.title.x = element_blank(),
        axis.ticks.y = element_blank(), 
        axis.text.y = element_blank()) +
  geom_tile(alpha = 0.8, 
            aes(fill = classday), 
            color="black", 
            linewidth = 0.45,
            show.legend = F
  ) +
  scale_x_discrete(expand = c(0,0)) +
  scale_y_discrete(expand = c(0,0)) +
  scale_fill_manual(values=c("white", "steelblue")
                    )
# classday_cal

officehr_cal <- Cal2 |> 
  ggplot(aes(wkdy, week)) +
  theme_bw() +
  theme(aspect.ratio = 0.15, 
        panel.grid.major.x = element_blank(),
        legend.position = "right",
        legend.title = element_blank(),
        axis.title.y = element_blank(), 
        axis.title.x = element_blank(),
        axis.ticks.y = element_blank(), 
        axis.text.y = element_blank()) +
  geom_tile(alpha = 0.8, 
            aes(fill = officehrday), 
            color="black", 
            linewidth = 0.45,
            show.legend = F
  ) +
  geom_text(aes(label = officehrtime), color = "black") +
  scale_x_discrete(expand = c(0,0)) +
  scale_y_discrete(expand = c(0,0)) +
  scale_fill_manual(values=c("white", "gray")
  )
# officehr_cal

```

## Communication

**Dr. Emily Robinson**

`r fontawesome::fa("envelope")` Email: [erobin17@calpoly.edu](mailto:erobin17@calpoly.edu?subject=Stat%20331/531)

`r fontawesome::fa("building")` Office: Building 25 Office 103 (by Statistics Department Office) 

**Course Discord Page:**

For questions of general interest, such as course clarifications or conceptual questions, please use the course Discord page (you will join this Week 1). I encourage you to give your post a concise and informative initial sentence, so that other people can find it. For example, *“How do I color bars in a barplot with ggplot?”* is a better opening sentence than *“help with plotting”*.

You may post snippets of your code and errors on Discord, but please do not post full solutions to lab assignments.

`r fontawesome::fa("brain")` `r fontawesome::fa("question")` `r fontawesome::fa("question")` While your posts are not anonymous, in this case there is no such thing as a bad question!

## Course Logistics

**Class Meeting Times:** Tuesdays/Thursdays

```{r}
#| include: false
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 1.5
#| out-width: 75%
#| fig-align: center
#| fig-pos: H
classday_cal
```

- Section 70: 9:10am - 11:00pm
- Section 71: 12:10pm - 2:00pm

**Room:** 38-0123 (Math & Science)

**Office Hours** are held in my office (25-103) during the following times:

<!-- ::: column-margin -->

<!-- {{< video https://www.youtube.com/embed/yQq1-_ujXrM?si=sFpcpfT9Cey2-Eaf >}} -->

<!-- Introducing Faculty Office Hours -->

<!-- ::: -->

```{r}
#| echo: false
#| warning: false
#| message: false
#| fig-width: 7
#| fig-height: 1.5
#| out-width: 90%
#| fig-align: center
#| fig-pos: H
officehr_cal
```

<!-- | Day        | Time                | -->
<!-- |------------|---------------------| -->
<!-- | Mondays    | 3:10pm - 4:00pm     | -->
<!-- | Wednesdays | 1:10pm - 2:00pm     | -->
<!-- | Thursdays  | 2:30pm - 3:30pm   | -->

Note that office hours are not just for when you have content questions. Stop by to introduce yourself, ask questions about the broader field of statistics, or share what you are working on!

I will likely be on Discord throughout the workday when I am in my office. Should you have a question, post in one of the discord channels and either myself or another student is likely to respond.

# Course Description

Stat 335/531 provides you with an introduction to programming for data and statistical analysis. The course covers basic programming concepts necessary for statistics, good computing practice, and use of built-in functions to complete basic statistical analyses.

**Prerequisites**

Entrance to STAT 331/531 requires successful completion of:

+ a Stat II qualifying course, and
+ an introductory programming course.

# Learning Objectives

This course will teach you the foundations of statistical computing principles in the language of `R`.

After taking this course, you will be able to:

+ Work with the RStudio Integrated development environment (IDE) and quarto documents.
+ Import, manage, and clean data from a wide variety of data sources.
+ Visualize and summarize data for informative exploratory data analysis and presentations.
+ Write efficient, well-documented, and tidy `R` code.
+ Program random experiments and simulations from probability models.

Additionally, it is my hope that you will learn to:

+ Extend your `R` skills independently through documentation and online resources.
+ Be thoughtful, deliberate, and ethical in your use of `R` and similar tools.
+ Use R to be playful, creative, and fun!
+ Contribute to and participate in the R Open Source Community.

# Course Tools

**Textbook**

There is an abundance of free online resources for learning programming and R. Therefore, the primary text for this course is a compilation of various resources - it is available for free at `r fontawesome::fa("book")` <https://earobinson95.github.io/stat331-calpoly-text/>.

This text has been modified from material by [Dr. Susan VanderPlas](https://github.com/srvanderplas). See [Statistical Computing using R and Python](https://srvanderplas.github.io/stat-computing-r-python/) for her course book with integration of content and videos from [Dr. Allison Theobold](https://github.com/atheobold) and [Dr. Kelly Bodwin](https://github.com/kbodwin).

In addition, you may find it useful to reference some of the following resources that I have consulted while assembling the text. Most are available online for free.

+ [R for Data Science (2nd edition)](https://r4ds.hadley.nz/)
+ [Modern Dive](https://moderndive.com/1-getting-started.html)
+ [Introduction to Modern Statistics](https://openintro-ims.netlify.app/)
+ [Advanced R](http://adv-r.had.co.nz/)

`r fontawesome::fa("computer")` Although you may always work on the Studio computers, I strongly recommend that you use your own personal laptop for this course if you have one.

`r fontawesome::fa("warning")` Chromebooks and iPads will **not** be sufficient to use `R`. If this requirement is limiting for you, please contact me ASAP.

\newpage

# Class Schedule & Topic Outline

This schedule is tentative and subject to change.

```{r calendar}
#| echo: false
#| eval: true
#| warning: false
#| fig-width: 8
#| fig-height: 3.5
#| fig-pos: 'h'
#| fig-cap: "Note: Tuesday, January 16th will follow a Monday class schedule."
class_cal
```

```{r schedule}
#| echo: false
#| eval: true
#| fig-pos: 'h'
class_days |> 
kableExtra::kable(caption = "Tentative schedule of class topics and important due dates", format = "simple")
```

::: callout-tip
## **Final Exam** on Thursday, March 21:

+ Section 70 at 10:10 - 1pm (if you come to class 9-11am)
+ Section 71 at 1:10 - 4pm (if you come to class 12-2pm)
:::

# Course Policies

## Assessment/Grading

Your grade in STAT 331/531 will contain the following components:

| Assignments          | Weight |
| -------------------- | -------|
| Check-ins            | 5%     |
| Flex Points          | 5%     |
| Practice Activities  | 10%    |
| Lab Assignments      | 25%    |
| Midterm Exam         | 15%    |
| Final Project        | 15%    |
| Final Exam           | 25%    |

Lower bounds for grade cutoffs are shown in the following table. I will not "round up" grades at the end of the quarter. See this [social media thread](https://twitter.com/drseanmullen/status/1604212304622518272?s=46&t=II3oNLTSSrljVPqptoe21g) for advice on *"Playing the lines. Don't be there."*

<!-- ::: column-margin -->

<!-- <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"> -->
<!-- </script> -->

<!-- <blockquote class="twitter-tweet"><p lang="en" dir="ltr">When my 11yo daughter complains her opponent in tennis is calling calls out..<br><br>I tell her:<br><br>“Don’t play the lines.”<br><br>As a college student, eventually every professor has to draw some lines.<br><br>Don’t play them so close. Don’t be there.</p>&mdash; Dr. Sean Mullen (@drseanmullen) <a href="https://twitter.com/drseanmullen/status/1604212307260645376?ref_src=twsrc%5Etfw">December 17, 2022</a></blockquote> -->

<!-- ::: -->

| Letter grade | X +  | X   | X - |
|--------------|------|-----|-----|
| A            |  .   | 93  | 90  |
| B            | 87   | 83  | 80  |
| C            | 77   | 73  | 70  |
| D            | 67   | 63  | 60  |
| F            | \<60 |     |     |

Interpretation of this table:

-   A grade of 85 will receive a B.
-   A grade of 77 will receive a C+.
-   A grade of 70 will receive a C-.
-   Anything below a 60 will receive an F.

### General Evaluation Criteria

In every assignment, discussion, and written component of this class, you are expected to demonstrate that you are intellectually engaging with the material. I will evaluate you based on this engagement, which means that technically
correct but low effort answers which do not demonstrate engagement or understanding will receive no credit.

When you answer questions in this class, your goal is to show that you either understand the material or are actively engaging with it. If you did not achieve this goal, then your answer is incomplete, regardless of whether or not it is
technically correct. This is not to encourage you to add unnecessary complexity to your answer - simple, elegant solutions are always preferable to unwieldly, complex solutions that accomplish the same task.

While this is not an English class, grammar and spelling are important, as is your ability to communicate technical information in writing; both of these criteria will be used in addition to assignment-specific rubrics to evaluate
your work.

## Assignment Breakdown

### Check-ins

Each week, you will find short Check-In questions or tasks throughout the text to make sure you are prepared for class that week. Make sure you submit your answers to these on Canvas to get credit for your efforts. Note that the Canvas
Check-in quizzes can be submitted up to three times without a penalty - so you should get 100% on this part of the course!

+ All responses to Check-ins are due **Tuesdays at 8:00am**.

### Practice Activities

Most Tuesday's, you will be given a Practice Activity to complete, to get the
hang of the week’s necessary `R` skills. These activities will always result in
a single, straightforward correct answer, that you will submit via Canvas (one
attempt). Therefore, there is no reason you should not get full credit in this
category!

Since these activities are intended to be your first attempt at new skills, they
are meant to be done with help from me and your peers. Therefore, you will
always be given some time in class to work on them.

+ Practice Activities are due **Thursdays at 8:00am.**

### Lab Assignments

Your typical homework assignments will be weekly labs. You will follow each
lab's instructions to complete tasks in `R` and submit a rendered .html
Quarto document to Canvas.

Most weeks, there will be class time on Thursdays dedicated to working on completing lab assignments.

+ Labs are due on **Mondays at 11:59pm**.

### Flex Points

A portion of your grade will be contributed to Flex Points out of a total of 100 points at the end of the quarter. These points are designed to encourage you to explore skills beyond the required curriculum, reflect on your own work, and actively engage in the computing or R community.

Throughout the quarter, various opportunities will arise, such as coding challenges, free online conference talks, or additional tasks to enhance your final project. Earned Flex Points will be determined based on whether your work meets "satisfactory" criteria for the activity. More than 100 Flex Points will be offered, allowing flexibility, but it's advisable not to postpone these opportunities until the end of the quarter.

Please note, there is no added benefit to earning points beyond 100. This ensures a focus on quality rather than quantity. If you have a suggestion for a Flex Point opportunity, feel free to submit your proposal via the Google Form [here](https://forms.gle/vCkpuWZhd9G6mT9M8).

+ Watch Canvas for Flex Point opportunities and deadlines.

## Attendance & Participation

I do not take formal attendance in this class. However, it is my expectation
that you remain in class and on task until you have finished all your activities
and assignments. Consistent, repeated failure to attend class or actively
participate in portions of the course will affect the demonstration of your
engagement with the course.

If you are feeling ill, please **do not come to class**. Instead, email me,
review the material and work on the participation activity and weekly lab
assignment; then schedule an appointment with me to meet virtually.

## Late Policy

We are living through a challenging time with unique, unusual circumstances. I do not want class deadlines to cause you extreme stress or anxiety. I offer **3 "grace days"** -- 24 hours to turn in the assignment late without a penalty or explanation necessary. These can be used on the Lab Assignments, Flex Point deadlines, and Final Project check-points, but not Practice Activities (since solutions will be posted) or Exams. These "grace days" can be used all at once on a single assignment or used on separate assignments throughout the quarter. Simply add a comment on the assignment in Canvas **and** send me an email to let me know you how many "grace days" you want to use on the assignment.

After using up your "grace days", late work will be accepted with a 10% grade penalty for each day late (including weekends) with a minimum grade of 50%.

::: callout-warning
### Automatic Canvas Settings

Canvas is set up to automatically input 0% for missing assignments (as an incentive to go complete the assignment) and apply the 10% grade deduction policy. I will need to manually adjust your grade when you use your "grace days" so it is important for you to leave a note on your assignment and email me. You are responsible for double checking your grade.
:::

If you find yourself with extenuating circumstances beyond the defined late policy, please email me before the due date.

# Course Expectations

You will get out of this course what you put in. The following excerpt was taken
from Rob Jenkins’ article “Defining the Relationship” which was published in The
Chronicle of Higher Education (August 8, 2016). This accurately summarizes what
I expect of you in my classroom (and also what you should expect of me).

*“I’d like to be your partner. More than anything, I’d like for us to form a mutually beneficial alliance in this endeavor we call education.*

*I pledge to do my part. I will:*

+ *Stay abreast of the latest ideas in my field.* 
+ *Teach you what I believe you need to know; with all the enthusiasm I possess.*
+ *Invite your comments and questions and respond constructively.*
+ *Make myself available to you outside of class (within reason).*
+ *Evaluate your work carefully and return it promptly with feedback.* 
+ *Be as fair, respectful, and understanding as I can humanly be.*
+ *If you need help beyond the scope of this course, I will do my best to provide it or see that you get it.* 

*In return, I expect you to:*

+ *Show up for class each day or let me know (preferably in advance) if you have some good reason to be absent.* 
+ *Do your reading and other assignments outside of class and be prepared for each class meeting.*
+ *Focus during class on the work we’re doing and not on extraneous matters (like whoever or whatever is on your phone at the moment).* 
+ *Participate in class discussions.*
+ *Be respectful of your fellow students and their points of view.* 
+ *In short, I expect you to devote as much effort to learning as I devote to teaching.*

*What you get out of this relationship is that you’ll be better equipped to succeed in this and other college courses, work-related assignments, and life in general. What I get is a great deal of professional and personal satisfaction. Because I do really like you [all] and want the best for you.”*

### Make Mistakes!

Programming is the process of making a series of silly or stupid mistakes, and
then slowly fixing each mistake (while adding a few more). The only way to know
how to fix these mistakes (and avoid them in the future) is to make them.
(Sometimes, you have to make the same mistake a few dozen times before you can
avoid it in the future). At some point during the class, you will find that
you've spent 30 minutes staring at an error caused by a typo, a space, a
parenthesis in the wrong place. You may ask for help debugging this weird error,
only to have someone immediately point out the problem... it is always easier to
see these things in someone else's code. This is part of programming, it is
normal, and you shouldn't feel embarrassed or sorry (unless you put no effort
into troubleshooting the problem before you asked for help)

If you manage to produce an error I haven't seen before, then congratulations.
You have achieved something special, and that achievement should be celebrated.
Each new and bizarre error is an opportunity to learn a bit more about the
programming language, the operating system, or the interaction between the two.

# Learning Environment and Support

I am committed to creating a safe and inclusive learning environment where all
students feel respected and supported. If there are any ways I can improve the
classroom environment to make it more welcoming for you, please don't hesitate
to let me know.

If you have a disability and require accommodations to fully participate in the
course, please contact me as soon as possible to discuss how I can best support
you. I also encourage you to register with Cal Poly's Disability Resource Center
(Building 124, Room 119 or at 805-756-1395) to explore additional accommodations
that may be available to you.

If you are experiencing food insecurity, housing instability, or other
challenges that may impact your ability to succeed in this course, please refer
to the resources listed on Canvas under "Student Support Services at Cal Poly."
These resources provide a range of essential support services, including
emergency financial assistance, counseling, and academic support.

I am committed to working with you to ensure that you have the resources and
support you need to succeed in this course. Let's work together to create a
positive and inclusive learning environment for all students.

# Academic Integrity and Class Conduct

Academic integrity is a fundamental value of this course and of the university.
Simply put, I will not tolerate cheating, plagiarism, or any other form of
academic dishonesty.

Any incident of academic misconduct, including dishonesty, copying, or plagiarism, will be reported to the Office of Student Rights and Responsibilities.

Cheating will earn you a grade of 0% on the assignment and an overall grade
penalty of at least 10%. In circumstances of flagrant cheating, you may be given
a grade of F in the course.

It is important to note that paraphrasing or quoting another's work without
proper citation is a form of academic misconduct. This includes the `R` code produced by someone else! Writing code is like writing a paper, it is obvious if you copied-and-pasted a sentence from someone else into your paper because the way each person writes is different.

Even inadvertent or unintentional misuse or appropriation of another’s work
(such as relying heavily on source material that is not expressly acknowledged)
is considered plagiarism. This includes using Chat GPT, which should only be used to help you problem solve just as a tutor or peer would, and not as a substitute for your own work. If you are struggling with writing the `R` code for an assignment, please reach out to me. I would prefer that I get to help you rather than you spending hours Googling things and get nowhere!

If you have any questions about using and citing sources, you are expected to
ask for clarification.

To ensure academic integrity, please be sure to cite all sources appropriately
and only use Chat GPT in an ethical manner. For more information on academic
misconduct and what constitutes cheating and plagiarism, please see
[academicprograms.calpoly.edu/content/academicpolicies/Cheating](https://academicprograms.calpoly.edu/content/academicpolicies/Cheating).

# California Faculty Association

The California Faculty Association (the labor union of Lecturers, Professors, Coaches, Counselors, and Librarians across the 23 CSU campuses) is in a difficult contract dispute with California State University management. It is possible that we will call a strike or other work stoppage this term. I promise to promptly inform you of any schedule disruption. Our working conditions are your learning conditions; we seek to protect both. For further information go to [www.CFAbargaining.org](https://www.cfabargaining.org/).
