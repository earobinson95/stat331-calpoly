---
title: "FizzBuzz (up to +9 FP)"
author: "Your Name"
format: html
embed-resources: true
editor: source
execute: 
  echo: true
  error: true
---

[Download the starter qmd file here](fizzbuzz.qmd).

The "FizzBuzz Test" is a famous programming interview question. 
> Write a program that prints the numbers from 1 to 30. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz"

1. Create a program flow map (on paper, or using an online tool of your choice, such as [Excalidraw](https://excalidraw.com/)) showing how FizzBuzz should be evaluated for a given integer x. You do not need to worry about the for loop in this program flow map. Then save this as a `.png` or `.jpg` file to your computer and include the file path to your image below. *Note, if you save your `flow-map.png` to the same folder as your `fizzbuzz.qmd` file, the relative filepath starts where your `.qmd` file is.*

```{r include-flow-map}
# Replace the file path to your program flow map image
knitr::include_graphics("fizzbuzz-flow-map.png")
```

Can you think of another way to solve FizzBuzz using a different logical structure? What do you need to know how to do in R for each solution? Do you need to know how to concatenate strings? Convert something from an integer to a string? Just output stuff to the command line? Thinking through these requirements can help you decide which solution is the simplest and/or best. 

2. List out the requirements of the solution in your program flow map here: 


3. In the `R` chunk below, write code which will solve this problem using a for loop that goes from 1 to 30.

```{r fizzbuzz-logic}
# Write your code here.

```

Each logical comparison can take some time to evaluate. How many logical comparisons are evaluated in your for loop? Can you count them up? For instance, if your if-elseif-else statement is TRUE on the first if statement, then the second logical comparison is not evaluated, but if it is FALSE for the first comparison, then the second comparison does get evaluated. Thinking about efficiency is one way to evaluate whether code is well-written or not.

4. Number of logical comparisons: 
