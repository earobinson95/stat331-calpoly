---
title: "WEEK 5: SPECIAL DATA TYPES"
format: 
  revealjs:
    theme: [default, ../../slide_custom.scss]
    auto-stretch: false
editor: source
self-contained: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

## Monday, February 6th

Today we will...

+ Final Project Group Formation
+ Review Lab 4
+ Mini lecture on text material
  + Reordering Factor Variables
  + Working with Date & Time Variables
+ [PA 5.1: Zodiac Killer](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA5_1-zodiac-killer.html)

## Final Project Group Formation

You will be completing a final project in Stat 331/531 in teams of four. More details to come soon!

In general, coming up submissions to be aware of:

+ **Group Formation Survey** due **Friday, 2/10 at 11:59pm**
  + Meant to help me gather information about your preferences and work style in order to facilitate the team formation process.
  + Your groupmates do not need to be in the same section as you, but you might find it useful for worktime during class.
+ Group Contracts
  + Let's have an open conversation with our team to make things go smooth
+ Project Proposal -- I will provide details on this!
+ Final Project Deliverable
  + Might be broken up into two steps since I know we like to procrastinate!

## Lab 4: Tips

**Don't include pages of output**

Use the code chunk option

`#| output: false`

`#| results: false`

<br>

**Data Description Components**

Make sure to include context when describing the data set as well as the data characteristics. 

+ Where did the data come from? What years? Location? Source?
+ What is the data being used for? 
+ What are the variables (in context) and observations (in context)?

## `mutate()` vs `summarise()`

::: panel-tabset
### `mutate()` preserve observations

![](images/mutate-sketch.JPG)

### `summarise()` collapse observations

![](images/summarise-sketch.JPG)
:::

## Lab 4: Game Plans!

:::: columns
::: column

**Read**

Average

Total

Which or For Each

Minimum

Maximum

Minimum and Maximum

:::
::: column

**Think**

`summarize(avg_var = mean())`

`summarize(total = sum())`

`group_by()`

`slice_min()`

`slice_max()`

`arrange() |> slice(1,n())`

:::
::::

## Lab 4: Better alternatives to bar plots

```{r}
library(tidyverse)
avocado <- read_csv(here::here("lab-assignments", "lab4", "avocado-updated-2020.csv"))

major_region <- c("California", "West", "South Central", "Great Lakes", "Midsouth", "Southeast", "Northeast", "Plains", "Total U.S.")

avocado_clean <- avocado |> 
  #rename PLU codes and tidy up data
  rename(small_hass = "4046", 
         large_hass = "4225", 
         xlarge_hass = "4770") |> 
  mutate(geography_type = if_else(geography %in% major_region, "Major", "Metro"),
         across(c(type:geography_type), as.factor)
         )

avocado_california <- avocado_clean |> 
  filter(geography %in% c("Los Angeles", "San Diego", "Sacramento", "San Francisco"))

organic_price_diff <- avocado_california |> 
  pivot_wider(id_cols = c(date, year, geography, geography_type),
              names_from = type,
              values_from = average_price
              ) |> 
  mutate(price_diff = organic - conventional) 

# organic_price_diff |> 
#   ggplot(aes(x = price_diff, 
#              y = geography, 
#              color = geography, 
#              fill = geography,
#              shape = geography)) +
#   geom_jitter(alpha = 0.3, show.legend = F) +
#   geom_boxplot(alpha = 0.5, show.legend = F) +
#   geom_vline(xintercept = 0, linetype = "dashed") +
#   theme_bw() +
#   theme(legend.position = "none",
#         axis.title.y = element_blank()) +
#   labs(subtitle = "Year",
#        x = "Difference in Price ($)\nOrganic - Conventional")
```

*Bar plots are typically reserved for displaying frequencies*

::: panel-tabset

### Summary Data
```{r}
diff_summary <- organic_price_diff |> 
  group_by(geography) |> 
  summarise(mean_price_diff = mean(price_diff),
            sd_price_diff = sd(price_diff)
            ) |> 
  arrange(desc(mean_price_diff))
diff_summary 
```

### Bar plots

```{r}
#| echo: true
#| code-fold: true
#| fig-height: 4
#| fig-width: 6
#| fig-align: center
diff_summary  |> 
  ggplot(aes(x = mean_price_diff, 
             y = geography,
             fill = geography)
         ) +
  geom_bar(stat = "identity") +
  labs(subtitle = "Geography",
       x = "Difference in Price ($)\nOrganic - Conventional",
       y = "") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(palette = "Dark2")
```

### Cleveland Dot Plots

Read more about [Cleveland Dot Plots](https://uc-r.github.io/cleveland-dot-plots)

```{r}
#| echo: true
#| code-fold: true
#| fig-height: 4
#| fig-width: 6
#| fig-align: center
diff_summary |> 
  arrange(desc(mean_price_diff)) |> 
  ggplot(aes(x = mean_price_diff, 
             y = geography,
             fill = geography)
         ) +
  geom_segment(aes(xend = 0,
                   yend = geography)
  ) +
  geom_point() +
  labs(subtitle = "Geography",
       x = "Difference in Price ($)\nOrganic - Conventional",
       y = "") +
  theme_minimal() +
  theme(legend.position = "none") +
  scale_fill_brewer(palette = "Dark2")
```
:::

# Factor Variables

## `library(forcats)` [cheatsheet](https://posit.co/wp-content/uploads/2022/10/factors-1.pdf)

:::: columns
::: column
**Common tasks**

+ Turn a `character` or `numeric` variable into a factor

+ Make a factor by discritizing / "binning" a numeric variable

+ Rename or reorder the `levels` of an existing `factor`
:::
::: column
```{r}
#| out-width: 50%
#| fig-align: center
knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/thumbs/forcats.png?raw=true")
```
:::
::::

::: callout-note
The packages `forcats` ("for categoricals") gives nice shortcuts for
wrangling categorical variables.

  + `forcats` loads with the `tidyverse`!
:::


## Create a `factor`

```{r}
#| echo: true
x <- c("apple", "dog", "banana", "cat", "banana", "Queen Elizabeth", "dog")
x
```

<br>

```{r}
#| echo: true
x <- factor(x)
x
```

## What happened?

```{r}
#| fig-align: center
knitr::include_graphics("images/factor_mapping.jpg")
```

<!-- :::: columns -->
<!-- ::: column -->
<!-- ```{r} -->
<!-- #| echo: false -->
<!-- x <- c(1,4,2,3,2,5,4) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- x -->
<!-- ``` -->
<!-- ::: -->
<!-- ::: column -->
<!-- ```{r} -->
<!-- x <- factor(c("apple", "dog", "banana", "cat", "banana", "Queen Elizabeth", "dog")) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| echo: true -->
<!-- #| eval: false -->
<!-- levels(x) -->
<!-- ``` -->

<!-- ```{r} -->
<!-- #| echo: false -->
<!-- levels(x) |>  -->
<!--   knitr::kable() -->
<!-- ``` -->
<!-- ::: -->
<!-- :::: -->

## `factor_recode()`

new level = old level

```{r}
#| echo: true
x <- fct_recode(x,
                "fruit" = "apple",
                "fruit" = "banana",
                "pet"   = "cat",
                "pet"   = "dog"
                )
x
```

::: callout-note
Notice Queen Elizabeth is a "remaining" level that was never recoded.
:::

## `factor_relevel()`

```{r}
#| echo: true
x <- fct_relevel(x, 
                 levels = c("Queen Elizabeth", 
                            "pet", 
                            "fruit")
)
levels(x)
```


## Factors in the `tidyverse`

::: panel-tabset
### cereal

```{r}
#| echo: true
library(liver)
data(cereal)
str(cereal)
```

### previously `case_when()`
```{r}
#| echo: true
cereal_casewhen <- cereal |> 
  mutate(manuf = case_when(manuf == "A" ~ "American Home Food Products", 
                           manuf == "G" ~ "General Mills", 
                           manuf == "K" ~ "Kelloggs", 
                           manuf == "N" ~ "Nabisco", 
                           manuf == "P" ~ "Post", 
                           manuf == "Q" ~ "Quaker Oats", 
                           manuf == "R" ~ "Ralston Purina"
                           ),
         manuf = as.factor(manuf)
  )
summary(cereal_casewhen$manuf)
```

### now `fct_recode`

```{r}
#| echo: true

cereal_recode <- cereal |> 
  mutate(manuf = fct_recode(manuf, 
                             "American Home Food Products" = "A", 
                             "General Mills" = "G", 
                             "Kelloggs" = "K", 
                             "Nabisco" = "N", 
                             "Post" = "P", 
                             "Quaker Oats" = "Q", 
                             "Ralston Purina" = "R"
                           )
  )

summary(cereal_recode$manuf)
```
:::

<!-- cereal_relabel <- cereal |> -->
<!--   mutate(manuf = fct_relabel(manuf, -->
<!--                              A ~ "American Home Food Products", -->
<!--                              G ~ "General Mills", -->
<!--                              K ~ "Kelloggs", -->
<!--                              N ~ "Nabisco", -->
<!--                              P ~ "Post", -->
<!--                              Q ~ "Quaker Oats", -->
<!--                              R ~ "Ralston Purina" -->
<!--                            ) -->
<!--   ) -->

## Factors in `ggplot2`

Disclaimer: fix your axes and legend labels!

::: panel-tabset
### original

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: 14
library(ggridges)
cereal_recode |> 
  ggplot(aes(x = sugars, 
             y = manuf, 
             fill = manuf)) +
  geom_density_ridges() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs()
```

### `fct_reorder()`

Default reorders by the median value

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: 3
cereal_recode |> 
  ggplot(aes(x = sugars, 
             y = fct_reorder(manuf, sugars), 
             fill = manuf)
         ) +
  geom_density_ridges() +
  theme_minimal() +
  theme(legend.position = "none") +
  labs()
```
:::

## Factors in `ggplot2`

Disclaimer: fix your axes and legend labels!

::: panel-tabset
### Original

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: 6
cereal_recode |> 
  group_by(manuf, shelf) |> 
  summarise(avg_sugar = mean(sugars, na.rm = TRUE)) |> 
  ggplot(aes(x = shelf, 
             y = avg_sugar, 
             color = manuf)
         ) +
  geom_line() +
  theme_minimal() +
  labs()
```

### `fct_reorder2()`

```{r}
#| echo: true
#| code-fold: true
#| code-line-numbers: 6
cereal_recode |> 
  group_by(manuf, shelf) |> 
  summarise(avg_sugar = mean(sugars, na.rm = TRUE)) |> 
  ggplot(aes(x = shelf, 
             y = avg_sugar, 
             color = fct_reorder2(manuf, .x = shelf, .y = avg_sugar))
         ) +
  geom_line() +
  theme_minimal() +
  labs()
```

::: 

## [Lab 5: Factors in Data Visualizations](https://earobinson95.github.io/stat331-calpoly/lab-assignments/lab5/lab5-factors-in-visualizations.html)

+ We will be working with the `survey.csv data` from *Lab 2: Exploring Rodents with ggplot2* to improve our plots!

+ See [Will Chase's 2020 RStudio Conference Presentation - Glamour of Graphics](https://www.youtube.com/watch?v=h5cTacaWE6I&ab_channel=PositPBC)
  + [slides](https://www.williamrchase.com/slides/assets/player/KeynoteDHTMLPlayer.html#0)

+ You will be asked to "sketch your game plan" with [https://excalidraw.com/](https://excalidraw.com/).

::: callout-caution

You will be **required** to use functions from the {forcats} package! e.g. `reorder()` is a no go, use `fct_reorder` instead!

:::

# Date + Time Variables

# `library(lubridate)`

:::: columns
::: column
**Common Tasks**

+ Convert a date-like variable ("May 8, 1995") to a special DateTime Object.

+ Find the weekday, month, year, etc from a DateTime object

+ Convert between timezones

:::
::: column
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/thumbs/lubridate.png?raw=true")
```
:::
::::

::: callout-note
The package `lubridate` is AMAZING for this. 

+ `lubridate` does not **load** with the `tidyverse` but it does **install**
  with it.
  
```{r}
#| echo: true
library(lubridate)
```
:::

## `datetime` Objects

There are actually three data types (classes) in R for dates and datetimes.

+ Date (duh)

+ POSIXlt (???)

+ and POSIXct (???)

## History of `POSIXlt` and `POSIXct`

:::: columns
::: column
- `POSIXct` -- stores date/time values as the number of seconds since
January 1, 1970 ("Unix Epoch")

- `POSIXlt` -- stores date/time values as a list with elements for second,
minute, hour, day, month, and year, among others. 
:::
::: column
In the "old days", to make a Date or Datetime object, you'd have to get the
format *just right*.

```{r}
#| echo: true
as.Date("1995-05-08") |>  str()
as_datetime("1995-05-08") |>  str()
```
:::
::::

## Enter `lubridate`!

:::: columns
::: column
```{r}
#| echo: true
make_date(year = 1995, month = 05, day = 08)
mdy("May 8, 1995")
dmy("8-May-1995", tz = "America/Chicago")
```
:::
::: column
```{r}
#| echo: true
parse_datetime("05/8/1995", format = "mdy")

parse_datetime("5/8/1995", format = "%m/%d/%Y")

```
:::
::::

## Common mistake with dates

*What is wrong with these two code chunks?*

```{r}
#| echo: true
as_datetime(2023-02-6)
```

<br>

```{r}
#| echo: true
my_date <- 2023-02-6
my_date
```

## Components of dates


```{r}
#| echo: true
bday <- ymd_hms("1995-05-8 6:32:12", tz = "America/Chicago")
bday
```

<br>

:::: columns
::: column
```{r}
#| echo: true
year(bday)
month(bday)
day(bday)
```
:::
::: column
```{r}
#| echo: true
wday(bday)

wday(bday, label = TRUE)

wday(bday, label = TRUE)
```
:::
::::

## When is my ______ birthday?

<br>

next birthday...

```{r}
#| echo: true
(bday + years(28)) |>  
  wday(label = TRUE, abbr = FALSE)
```

<br>

hundredth...

```{r}
#| echo: true
bday + years(100)
```

## [PA 5.1: Zodiac Killer](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA5_1-zodiac-killer.html)

One of the most famous mysteries in California history is the identity of the so-called “Zodiac Killer”, who murdered 7 people in Northern California between 1968 and 1969. A new murder was committed last year in California, suspected to be the work of a new Zodiac Killer on the loose.

Unfortunately, the date and time of the murder is not known. You have been hired to crack the case. Use the clues below to discover the murderer’s identity.

> Submit the name of the killer to the Canvas Quiz.

## To do...

+ **PA 5.1: Zodiac Killer**
  + Due Wednesday, 2/8 at 8:00am

+ **Lab 5: Factors in Data Visualization**
  + Due Friday, 2/10 at 11:59pm
  
+ **Final Project Group Formation Survey**
  + Due Friday, 2/10 at 11:59pm
  
## Wednesday, February 8th

Today we will...

+ Review PA 5.1: Zodiac Killer
+ Midterm Exam 2/15: What to Expect
+ Mini lecture on text material
  + Strings
  + Regular Expressions
+ [PA 5.2: Scrambled Message](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA5_2-scrambled-message-regex.html)

## Midterm Exam -- In-class Wednesday 2/15

## Lab 4: Game Plans!

::: panel-tabset
### Q5

### Q7

### Q8

:::

# `stringr`

```{r}
#| echo: true
library(stringr)
```

## strings

**raw strings**

```{r}
str_view(r"{This is a raw string! :)}")
```

## `separate_xxx_delim()`

`separate_longer_delim()`

`separate_wider_delim()`

## Combine Strings

::: panel-tabset
### `str_c()`

### `str_glue()`

### `str_flatten()`
:::

# regex

```{r}
#| fig-align: center
#| out-width: 70%
knitr::include_graphics("images/regular_expressions.png")
```

## `pattern = `

[Web app to test R regular expressions](https://spannbaueradam.shinyapps.io/r_regex_tester/)

The **pattern argument** in all of the `stringr` functions ...


## Meta Characters


| Character | What it does                          |
| --------- | ------------------------------------- |
| `.`       | wild card; matches any character      |
|           |                                       |
| `+`       | pattern repeats at least once (matches 1 to infinity) |
| `?`       | pattern is optional (matches 0 or 1)  |
| `*`       | pattern is optional or repeats (matches 0 to infinity)        |
|           |                                       |
|           |                                       |
| `|`       | alteration (or)                       |

## Character Classes `[]`

`^` except

`-` range

# Key `stringr` Functions

`str_detect()`

`str_count()`

`str_replace()`, `str_replace_all()`

## `str_detect()` Detect Matches
Returns logical boolean `TRUE/FALSE` if pattern matches

+ Pairs well with `filter()`
+ Could be used with `summarise()` and `sum` or `mean`

::: {.callout-note collapse="true"}
### Related functions 
`str_subset()` returns just the strings that contain the match

`str_which()` returns the indexes of strings that have a match
:::

## `str_count()` Count Matches

Tells you how many matches of the pattern in each string

+ Pairs well with `mutate()`

::: {.callout-note collapse="true"}
### Related functions 
`str_to_lower()` converts all letters in the strings to lowercase

`str_to_upper()` converts the first letter of the strings to uppercase
:::

## `str_replace()`, `str_replace_all()`

`str_replace(x, pattern = "", replace = "")`

`str_replace_all()`


::: {.callout-note collapse="true"}
### Related functions 
`str_remove(x, pattern, "")`

`str_remove_all()`
:::

## Escape: Get `\` happy! `\\\\`

In order to match a special character you need to "escape" first

::: callout-note
Could also use `[]` character class

Full set of metacharacters `.` `^`  `$` `\`  `|` `*` `+` `?` `{` `}` `[` `]` `(` `)`
:::

::: callout-warning
In general, look at punctuation characters with suspicion.
:::

## When in Doubt
<br>
<br>
```{r}
#| fig-align: center
#| out-width: 80%
knitr::include_graphics("images/backslashes.png")
```

## Anchoring

::: panel-tabset
### `^` anchor to start

### `$` anchor to end

### `\b` boundaries
:::

## More on Character Classes

::: panel-tabset

### Digits
`\d` matches any digit

`\D` matches anything that isn’t a digit

```{r}
# example goes here
```

### Whitespace
`\s` matches any whitespace (e.g. space, tab, newline)

`\S` matches anything that isn’t whitespace.

```{r}

# example goes here
```

::: callout-note
`str_trim()`
:::

### "Words"
`\w` matches any “word” character, i.e. letters and numbers

`\W` matches any “non-word” character

```{r}
# example goes here
```

:::

## More on Quantifiers

::: panel-tabset

### `{n}` Exactly

`{n}` matches exactly n times.

### `{n,}` At Least

`{n,}` matches at least n times.

### `{n,m}` Between

`{n,m}` matches between n and m times.
:::

# strings in the `tidyverse`

## `matches(pattern)`

Selects all variables with a name that matches the supplied pattern

+ pairs well with `select()`, `rename_with()`, and `across()`

## `pivot_longer()`

`name_pattern = `

`delim = regex()`


## [PA 5.2: Scrambled Message](https://earobinson95.github.io/stat331-calpoly/practice-activities/PA5_2-scrambled-message-regex.html)

**Reminder about Indexing Vectors**

## To do...

+ **PA 5.2: Scrambled Message**
  + Due Friday, 2/10 at 8:00am

+ **Lab 5: Factors in Data Visualization**
  + Due Friday, 2/10 at 11:59pm

+ **Final Project Group Formation Survey**
  + Due Friday, 2/10 at 11:59pm

+ [**Bonus Challenge: Murder Mystery in SQL City**](https://earobinson95.github.io/stat331-calpoly/bonus-challenges/bonus-challenge-murder-in-sql-city.html)
  + Due Sunday 2/12 at 11:59pm
  
+ **Read Chapter 6: Version Control**
  + **Concept Check 6.1 + 6.2** due Monday (2/13) at 8:00am

  