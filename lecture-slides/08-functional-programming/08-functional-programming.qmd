---
title: "Functional Programming"
format: 
  revealjs:
    theme: default
    auto-stretch: false
editor: source
embed-resources: true
execute:
  echo: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(palmerpenguins)
```

## Tuesday, February 26

Today we will...

+ Project Proposal + Data
+ New Material^[Material and images for today's lecture were modified from Dr. Theobold and [Hansj√∂rg Neth's ds4psy text](https://bookdown.org/hneth/ds4psy/12.3-iter:functional-programming.html#iter:functional-programming)]
  + Review vectorization
  + The `map()` family
+ PA 8: The 12 Days of Christmas Starter Functions


## Project Proposal + Data

You must complete the *objectives* and write up the *written components* outlined under Section 1 on the Project Details page on Canvas.

  + Due on Canvas on Tuesday, 3/5.


# Performing Repeated Tasks

## Repetition

Type out the task over and over.

```{r}
#| echo: false
#| fig-align: center
#| fig-cap: "https://bookdown.org/hneth/ds4psyl"
#| out-width: 50%
knitr::include_graphics("images/bart_board_iter.png")
```

. . .

Do not do this.

## Iteration

Repeatedly execute the *same* operation over and over.

+ Loops (e.g., `for()` and `while()`) allow us to iterate.

:::: {.columns}
::: {.column width="40%"}
```{r}
#| echo: true
for(i in 1:10){
  print(i^2)
}
```
:::
::: {.column width="60%"}
```{r}
#| echo: false
#| fig-align: center
#| out-width: 80%
#| fig-cap: "https://bookdown.org/hneth/ds4psyl"
knitr::include_graphics("images/bart_board_for.png")
```
:::
::::


## Vectorization

Many operations in R are **vectorized**.

+ These functions operate on *vectors* of values rather than a *single* value.
+ We can iterate *without* writing a loop.

. . .

```{r}
#| echo: true
x <- seq(from = -4, to = 6)
x
```

:::: {.columns}
::: {.column width="50%"}
Loop:

```{r}
for(i in 1:length(x)){
  x[i] <- abs(x[i])
}
x
```
:::
::: {.column width="50%"}
Vectorized:

```{r}
#| echo: false
x <- seq(from = -4, to = 6)
```

```{r}
abs(x)
```
:::
::::


## Vectorization

**Not every function is (or can be) vectorized.**

+ E.g., a function using `if()` statements **cannot** operate on vectors.

. . .

:::: {.columns}
::: {.column width="47%"}
```{r}
#| error: true
pos_neg_zero <- function(x){
  if(x > 0){
    return("Greater than 0!")
  } else if (x < 0){
    return("Less than 0!")
  } else {
    return("Equal to 0!")
  }
}

my_vec <- seq(from = -4, to = 4)
pos_neg_zero(x = my_vec)
```

:::
::: {.column width="53%"}

The `if(x > 0)` statement can only be checked for something of length 1 (a single number, not a vector).

:::
::::


## Vectorization

**Not every function is (or can be) vectorized.**

+ E.g., a function using `if()` statements **cannot** operate on vectors.

:::: {.columns}
::: {.column width="47%"}
```{r}
#| error: true
pos_neg_zero <- function(x){
  if(x > 0){
    return("Greater than 0!")
  } else if (x < 0){
    return("Less than 0!")
  } else {
    return("Equal to 0!")
  }
}

my_vec <- seq(from = -4, to = 3)
pos_neg_zero(x = my_vec)
```

:::
::: {.column width="53%"}

```{r}
result <- rep(NA, length(x))
for(i in 1:length(x)){
  result[i] <- pos_neg_zero(x[i])
}

result
```
:::
::::


## Vectorization

**Not every function is (or can be) vectorized.**

+ E.g., a function using `if()` statements **cannot** operate on vectors.
+ A **vectorized** version of `if()` statements? `case_when()`

```{r}
pos_neg_zero <- function(x){
  state <- case_when(x > 0 ~ "Greater than 0!", 
                     x < 0 ~ "Less than 0!", 
                     .default = "Equal to 0!")
  return(state)
}

my_vec <- seq(from = -4, to = 3)
pos_neg_zero(x = my_vec)
```


## Some functions cannot be vectorized!

Applying `class()` to a **single** variable in a dataframe returns the data type of that column:

```{r}
class(penguins[[1]])
```

Trying to apply `class()` to **every** variable in a data.frame returns the data type of the data.frame:

```{r}
class(penguins)
```


## What can we do instead?

Write a `for()` loop...

```{r}
data_type <- rep(NA, length = ncol(penguins))
for(i in 1:ncol(penguins)){
  data_type[i] <- class(penguins[[i]])
}
data_type
```

```{r}
#| eval: false
#| echo: false
# format table nicely
tibble(column = names(penguins),
       type = data_type) |>
  pivot_wider(names_from = column,
              values_from = type) |>
  knitr::kable() |>
  kableExtra::kable_styling(font_size = 30)
```

. . .

... but loops are computationally intensive!


## What can we do instead?

What about `across()`?

+ Easily perform the **same** operation on multiple columns.

```{r}
penguins |> 
  summarise(across(.cols = everything(), 
                   .fns = ~ class(.x)
                   )
            )
```

. . .

Ugh. Internally, `across()` uses a `for()` loop!

```
for (j in seq_fns) {
  fn <- fns[[j]]
  out[[k]] <- fn(col, ...)
  k <- k + 1L
```


## What can we do instead?

<br>

...


# Functional Programming

> To understand computations in R, two slogans are helpful:
> 
> - Everything that exists is an object.
> 
> - Everything that happens is a function call.
> 
> John Chambers (creator of the pre-cursor to R)


## Functional Programming

What's the big picture?

+ We will use **functions** as the **arguments** to other functions!

<br>

::: callout-note
There are a slew of `apply()` functions you will likely come across.

We will instead focus on the `purrr` package and the `map()` family of functions.
:::


## `purrr`

:::: {.columns}
::: {.column width="80%"}
The `purrr` package breaks common list manipulations into small, independent pieces.

This strategy involves two steps:

:::
::: {.column width="20%"}
![](images/purrr.png){width=80%}
:::
::::

1. Break a complex problem into smaller **sub-problems**.
    + We then compose the small pieces together with `|>`.
2. Solve each sub-problem for **a single element** of a list.
    + Once done, `purrr` will generalize the solution to every element in the list.


## Brief Review: Lists

A list is a 1-dimensional, heterogeneous data structure.

+ There are no restrictions on what data type or structure it can contain -- values, vectors, other lists, dataframes, etc.
+ Lists are indexed with `[]` or `[[]]`.

. . .

:::: {.columns}
::: {.column width="50%"}
```{r}
#| echo: false
my_list <- list(c(T, F, T, T), 
                matrix(c(6.7, 5.58, 4.4, 6.0), nrow = 2),
                "A")
my_list
```
:::
::: {.column width="50%"}
```{r}
my_list[1]
my_list[[2]]
my_list[[2]][1,2]
```
:::
::::


## Brief Review: Lists

A dataframe / tibble is a specially formatted **list of columns**!

```{r}
small_penguins <- penguins[1:8,]
small_penguins[3]
small_penguins[[3]]
```

. . .

The `purrr` package works for lists, so it works for data.frames.


## `map()`

The `map()` function **iterates** through each item in a list and applies a function, then returns the new list.

```{r}
#| fig-align: center
#| out-width: 30%
#| echo: false
knitr::include_graphics("images/map.png")
```

Note: the first argument in `map()` is the list, so if we pipe into it, we **only** specify the function!


## `map()` + Dataframes

A dataframe is just a list of columns -- `map()` will apply a function to every column.

. . .

```{r}
penguins |> 
  select(bill_length_mm:body_mass_g) |>
  map(.f = ~ mean(.x, 
                  na.rm = TRUE
                  )
      )
```

Use a lambda function (with `~` and `.x`), just like in <font size=6> `across()`</font>!


## The `map()` Family

The `map_xxx()` variants allow you to specify the **type of output** you want.

+ `map()` creates a *list*.
+ `map_chr()` creates a *character vector*.
+ `map_lgl()` creates an *logical vector*.
+ `map_int()` creates a *integer vector*.
+ `map_dbl()` creates a *numeric vector*.

All take in a list and a function as arguments.


## `map()` + penguins

::: panel-tabset

### `map_dbl()`

Calculate the mean of each column.

```{r}
penguins |> 
  select(bill_length_mm:body_mass_g) |> 
  map_dbl(.f = ~ mean(.x, 
                      na.rm = TRUE
                      )
          )
```

Output is a **vector of doubles**.


### `map_int()`

Calculate the number of `NA`s in each column.

```{r}
penguins |> 
  map_int(.f = ~ sum(is.na(.x)))
```

Output is a **vector of integers**.


### `map_lgl()`

Calculate the number of `NA`s in each column.

```{r}
#| error: true
penguins |> 
  map_lgl(.f = ~ sum(is.na(.x)))
```

R returns an error if the output is of the wrong type!

+ Output is a logical vector??

:::


## `map_if()`

The `map_if()` function allows us to **conditionally** apply a function to each item in a list.

. . .

::: panel-tabset

### `across()`

```{r}
#| eval: false
penguins |> 
  mutate(across(.cols = where(is.numeric), 
                .fns = ~ scale(.x)
                )
         )
```

```{r}
#| echo: false
penguins |> 
  select(species:bill_depth_mm, sex) |> 
  mutate(across(.cols = where(is.numeric), 
                .fns = scale)
         ) |> 
  head()
```

### `map_if()`

```{r}
penguins |> 
  map_if(.p = ~ is.numeric(.x), 
         .f = ~ scale(.x)
         )
```

### `map_if()` to tibble

```{r}
#| eval: false
penguins |> 
  map_if(.p = ~ is.numeric(.x), 
         .f = ~ scale(.x)
         ) |> 
  as.tibble()
```

```{r}
#| echo: false
penguins |> 
  select(species:bill_depth_mm, sex) |> 
  map_if(.p = ~ is.numeric(.x), 
         .f = scale) |> 
  as.tibble() |> 
  head()
```

:::


## `pmap()` + Family

These functions take in a **list of vectors** and a **function**.

+ The function must accept a number of arguments equal to the length of the list,

```{r}
#| fig-align: center
#| out-width: 65%
#| echo: false
knitr::include_graphics("images/pmap.png")
```


## The `map()` Family

<br>

There are **so many** functions in the `map()` family -- check out the `purrr` [cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/purrr.pdf)!


## Use functional programming!

```{r}
#| echo: false
#| fig-align: center
#| out-width: 70%
#| fig-cap: "https://bookdown.org/hneth/ds4psy"
knitr::include_graphics("images/bart_board_map.png")
```


## [PA 8: The 12 Days of Christmas](https://zoerehnberg.github.io/STAT331-S23/practice_activities/PA8.html)

```{r}
#| echo: false
#| fig-align: center
#| out-width: 80%
#| fig-cap: "https://studioplayhouse.org/the-12-days-of-christmas/"
knitr::include_graphics("https://studioplayhouse.org/wp-content/uploads/2020/06/12-Days-of-christmas.jpg")
```

## To do...
  
+ **PA 8: The 12 Days of Christmas Starter Functions**
  + Due Thursday 2/29 at 8:00am.
  
+ **Project Proposal + Data**
  + Due Tuesday 3/5 at 11:59pm.

## Thursday, February 29

Today we will...

+ New Material
  + The `map2()` family
+ Work Time
  + Lab and Flex Points
  + Project Proposal

## The `map2()` Family

These functions allow us to iterate over **two** lists at the same time.

![](images/map2.png){width=80%)}


## The `map2()` Family

These functions include:

+ `map2()`
+ `map2_chr()`
+ `map2_lgl()`
+ `map2_int()`
+ `map2_dbl()`

Each function has **two** list arguments, denoted `.x` and `.y`, and a function argument.


## Small `map2()` Example

Find the minimum.

```{r}
a <- c(1, 2, 4)
b <- c(6, 5, 3)

map2_chr(.x = a, 
         .y = b,
         .f = ~ str_glue("The minimum of {.x} and {.y} is {min(.x, .y)}.")
         )
```


## Big `map2()` Example


::: panel-tabset

### The Problem

Regress vehicle MPG on vehicle weight. Do the regression *separately* for 4-, 6-, and 8-cylinder vehicles.

```{r}
#| echo: false
mtcars |>
  ggplot(aes(x = wt,
             y = mpg)
         ) +
  geom_point() +
  geom_smooth(method = "lm") +
  facet_wrap(~ cyl, labeller = label_both) +
  theme_bw() +
  theme(aspect.ratio = 1)
```

### Split Data

```{r}
by_cyl <- mtcars |>
  group_split(cyl)
by_cyl
```

### Fit Model

Fit a linear regression model to each subset of the data.

+ Regress vehicle MPG on vehicle weight.
+ We are fitting **three** separate models.

```{r}
mods <- by_cyl |>
  map(.f = ~ lm(mpg ~ wt, 
                data = .x)
      )
mods
```

### Predict

Predict vehicle MPG from observed vehicle weight.

+ The `predict()` function needs **two** inputs.

```{r}
map2(.x = mods, 
     .y = by_cyl, 
     .f = ~ predict(object = .x, 
                    data = .y
                    )
     )
```
:::


## `map()` + `nest()` in `tibbles`!

Using `map` with a tibble's is where a lot of the magic can happen.

::: panel-tabset

### `nest()`
```{r}
#| code-fold: true
mtcars |> 
  nest(cyl_data = -cyl)
```

### `mutate()` + `map()`

```{r}
#| code-fold: true
mtcars |>
  nest(cyl_data = -cyl) |>
  mutate(mod = map(cyl_data, 
                   .f = ~ lm(mpg ~ wt, 
                             data = .x
                             )
                   ),
         pred_mpg = map2(.x = mod, 
                      .y = cyl_data, 
                      .f = ~ predict(object = .x, 
                                     data = .y
                                     )
                      )
         )
```

### `unnest()`

```{r}
#| code-fold: true
mtcars |>
  nest(cyl_data = -cyl) |>
  mutate(mod = map(cyl_data, 
                   .f = ~ lm(mpg ~ wt, 
                             data = .x
                             )
                   ),
         pred_mpg = map2(.x = mod, 
                      .y = cyl_data, 
                      .f = ~ predict(object = .x, 
                                     data = .y
                                     )
                      )
         ) |> 
  select(-mod) |> 
  unnest(cols = c(cyl_data, pred_mpg)) |> 
  select(cyl, wt, mpg, pred_mpg)
```
:::

## A (boring) Example

::: panel-tabset

### Break It Down

How can we print out Timothee Chalamet's statistics [song](https://www.youtube.com/watch?v=BvWefB4NGGI&ab_channel=Timoth%C3%A9eChalametFan)?

+ We need to repeat "Statistics, yup" man times...

```{r}
map_chr(.x = 1:10,
        .f = ~ "Statistics, yup"
        )
```

+ ...but at different points in the song, he repeats this phrase a different number of times!

### Function

Let's turn this into a function!

```{r}
chalamet_statistics <- function(n){
  
  lyrics <- map_chr(.x = 1:n, 
                    .f = ~ "Statistics, yup"
                    )
  
  return(str_glue("{lyrics}"))
}
```

### `str_xxx()`

The `str_glue()` function embeds R expressions in curly brackets that are then evaluated and inserted into the argument string.

```{r}
name <- "Dr. Robinson"
str_glue('My name is {name}.')
```

The `str_flatten()` function combines a character vector into a single string.

```{r}
name_vec <- c("My", "name", "is", "Dr. Robinson")
str_flatten(name_vec, collapse = " ")
```

### Repeat

```{r}
chalamet_statistics(n = 8)
```

With `str_glue()`, long strings get broken by line and concatenated together.

:::


## A (better) Example

*99 bottles of beer on the wall, 99 bottles of beer. Take one down, pass it around, 98 bottles of beer on the wall...*

::: panel-tabset

### Lyrics

```{r}
#| code-fold: true
bottles_lyrics <- function(n){
  
  lyrics <- str_glue("{n} bottles of beer on the wall, {n} bottles of beer \nTake one down, pass it around, {n -1} bottles of beer on the wall")
  
  return(lyrics)
  
}

bottles_lyrics(3)
```

### Song
```{r}
#| code-fold: true
bottles_song <- function(n){
  
  song <- map_chr(.x = n:0, 
                  .f = ~ bottles_lyrics(.x)
                  )
  
  return(str_glue("{song}"))
}

bottles_song(3)
```

### Alternate Ending

*No more bottles of beer on the wall, no more bottles of beer. Go to the store, buy some more, 99 bottles of beer on the wall...*

```{r}
#| code-fold: true
bottles_lyrics <- function(n){
  if(n == 0){
    lyrics <- str_glue("No more bottles of beer on the wall, no more bottles of beer. \nGo to the store, buy some more, 99 bottles of beer on the wall...")
  } else{
    lyrics <- str_glue("{n} bottles of beer on the wall, {n} bottles of beer \nTake one down, pass it around, {n -1} bottles of beer on the wall")
  }
  
  return(lyrics)
}
```

### Final Song

```{r}
bottles_song(4)
```
:::


## Lab 8: The 12 Days of Christmas

1. Write a `sing_day()` function.
  
::: callout-tip
+ Start with a small example and test it on a single day **outside of the function**.
+ `str_glue()` and `str_flatten()` might be useful -- find their arguments in the documentation.
:::

2. Iterate your `sing_day()` function over all days.
3. Style your output!

## To do...
  
+ **Lab 8: The 12 Days of Christmas Full Song**
  + Due Monday, 3/4 at 11:59pm.
  
+ **Project Proposal + Data**
  + Due Tuesday, 3/5 at 11:59pm.
  
+ Read **Chapter 9: Simulation**
  + Check-in 9.1 & 9.2 due Tuesday, 3/5 at 8:00am.
  
  