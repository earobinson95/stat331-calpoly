---
title: "WEEK 6: VERSION CONTROL"
format: 
  revealjs:
    theme: [default, ../../slide_custom.scss]
    auto-stretch: false
editor: source
self-contained: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
```

## Tuesday, February 13th

Today we will...

+ Review
  + PA 5.2: Scrambled Message
  + Lab 4 Essay: Center vs Family Care
  + Lab 5: Murder in SQL City
+ Group Contract
+ New Material
  + git/GitHub
  + Connect GitHub to RStudio
+ PA 6: Merge Conflicts -- Collaborating within a GitHub Repo

## Childcare Essays: Data Cleaning

```{r}
#| code-fold: true
library(tidyverse)
childcare_costs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/childcare_costs.csv')
counties <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-05-09/counties.csv')
```

::: panel-tabset

## Join + Regions

```{r}
#| code-fold: true
#| echo: true

ca_childcare <- counties |> 
  filter(state_abbreviation == "CA") |> 
  left_join(childcare_costs,
            by = "county_fips_code"
            ) |> 
  mutate(region = fct_collapse(county_name,
                               `Superior California`         = c("Butte County", "Colusa County", "El Dorado County", "Glenn County", "Lassen County", "Modoc County", "Nevada County", "Placer County", "Plumas County", "Sacramento County", "Shasta County", "Sierra County", "Siskiyou County", "Sutter County", "Tehama County", "Yolo County", "Yuba County"),
                               `North Coast`                 = c("Del Norte County", "Humboldt County", "Lake County", "Mendocino County", "Napa County", "Sonoma County", "Trinity County"),
                               `San Francisco Bay Area`      = c("Alameda County", "Contra Costa County", "Marin County", "San Francisco County", "San Mateo County", "Santa Clara County", "Solano County"),
                               `Northern San Joaquin Valley` = c("Alpine County", "Amador County", "Calaveras County", "Madera County", "Mariposa County", "Merced County", "Mono County", "San Joaquin County", "Stanislaus County", "Tuolumne County"),
                               `Central Coast`               = c("Monterey County", "San Benito County", "San Luis Obispo County", "Santa Barbara County", "Santa Cruz County", "Ventura County"),
                               `Southern San Joaquin Valley` = c("Fresno County", "Inyo County", "Kern County", "Kings County", "Tulare County"),
                               `Inland Empire`               = c("Riverside County", "San Bernardino County"),
                               `Los Angeles County`          = c("Los Angeles County"),
                               `Orange County`               = c("Orange County"),
                               `San Diego - Imperial`        = c("Imperial County", "San Diego County")
                                )
         )|> 
  select(county_name, region, study_year, mc_infant:mfcc_preschool)
ca_childcare
```

## Pivot + `separate()`

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  pivot_longer(cols = mc_infant:mfcc_preschool,
               names_to = "group", 
               values_to = "median_price"
               ) |> 
  separate_wider_delim(group,
                       names = c("care", "development"),
                       delim = "_"
                       ) |> 
  mutate(care = fct_recode(care,
                           "Center" = "mc",
                           "Family" = "mfcc"
                           ),
         development = fct_relevel(development,
                                   "infant", "toddler", "preschool"
                                   )
         )
```

## Pivot + `names_sep = "_"`

```{r}
#| code-fold: true
#| echo: true

ca_childcare <- ca_childcare |> 
  pivot_longer(cols = mc_infant:mfcc_preschool,
               names_to = c("care", "development"),
               names_sep = "_",
               values_to = "median_price"
               ) |> 
  mutate(care = fct_recode(care,
                           "Center" = "mc",
                           "Family" = "mfcc"
                           ),
         development = fct_relevel(development,
                                   "infant", "toddler", "preschool"
                                   )
         )
ca_childcare
```

:::

## Childcare Essays: Gestalt Principles (Table Design)


::: panel-tabset

## Original

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  group_by(care, development) |> 
  summarize(median = median(median_price)) |> 
  knitr::kable(digits = 2)
```

## Better

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  group_by(care, development) |> 
  summarize(median = median(median_price),
            IQR = IQR(median_price)
            ) |> 
  arrange(development) |> 
  knitr::kable(digits = 2)
```

## Better(er)

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  group_by(care, development) |> 
  summarize(median = median(median_price)
            ) |> 
  pivot_wider(id_cols = development,
              names_from = care,
              values_from = median
              ) |> 
  knitr::kable(digits = 2)
```
:::

## Childcare Essays: Gestalt Principles (Graph Design)

::: panel-tabset

## Original

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  ggplot(aes(x = development,
             y = median_price
             )
         ) +
  geom_boxplot() +
  facet_grid(~ care) +
  labs(x = "Development Stage",
       y = "",
       subtitle = "Median Weely Price of Childcare ($)"
       )
```

## Better

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  ggplot(aes(x = care,
             y = median_price
             )
         ) +
  geom_boxplot() +
  facet_grid(~ development) +
  labs(x = "Care Setting",
       y = "",
       subtitle = "Median Weely Price of Childcare ($)"
       )
```

:::

## Childcare Essays: Alternative Plots

::: panel-tabset

## Include Time

```{r}
#| code-fold: true
#| echo: true

ca_childcare |> 
  mutate(care = fct_reorder2(.f = care,
                             .x = study_year,
                             .y = median_price
                             )
         ) |> 
  ggplot(aes(x = study_year,
             y = median_price,
             color = care,
             shape = care
             )
         ) +
  geom_point(alpha = 0.2) +
  geom_smooth() +
  facet_grid(~ development) +
  scale_color_brewer(palette = "Dark2") +
  scale_x_continuous(breaks = seq(2008, 2018, 3)) +
  scale_y_continuous(limits = c(100, 500), breaks = seq(0, 500, 50)) +
  theme_bw() +
  labs(x = "Year",
       y = "",
       subtitle = "Median Weely Price of Childcare ($)",
       color = "Care Setting",
       shape = "Care Setting"
       )
```

## Include Region

```{r}
#| code-fold: true
#| echo: true
#| fig-height: 3
#| fig-width: 9

ca_childcare_wide <- ca_childcare |> 
  group_by(region, care, development) |> 
  summarize(median = median(median_price)) |> 
  pivot_wider(id_cols     = c(region, development),
              names_from  = care,
              values_from = median
              )
ca_childcare_wide[1:2,]

ca_childcare |> 
  group_by(region, care, development) |> 
  summarize(median = median(median_price)) |> 
  ggplot() +
  geom_segment(data = ca_childcare_wide,
               aes(x = Center,
                   xend = Family,
                   y = region,
                   yend = region),
               color = "darkgray") +
  geom_point(aes(x = median,
             y = region,
             color = care,
             shape = care
             ),
             size = 2
             ) +
  facet_grid(~ development) +
  scale_color_brewer(palette = "Dark2") +
  scale_x_continuous(limits = c(100, 500), breaks = seq(0, 500, 100)) +
  theme_bw() +
  labs(x = "Median Price ($)",
       y = "",
       subtitle = "Median Weely Price of Childcare ($)",
       color = "Care Setting",
       shape = "Care Setting"
       )
```
:::


## Childcare Essays: Examples

+ [Example 1](https://earobinson95.github.io/stat331-calpoly/lab-assignments/lab4/examples/lab4-childcare-costs-example1.html)
+ [Example 2](https://earobinson95.github.io/stat331-calpoly/lab-assignments/lab4/examples/lab4-flexpoints-example2.html)

# git/GitHub Basics

## Git vs GitHub

:::: columns
::: column
<br>
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://bornsql.ca/wp-content/uploads/2022/03/Git-Logo-2Color.png") 
```

+ Language for version control
+ Developed by Linus Torvalds (Linux, Android, Chrome OS)
+ Uses command line or GUI
:::
::: column
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://logos-world.net/wp-content/uploads/2020/11/GitHub-Emblem.png") 
```

+ Cloud-based hosting service
+ Basic services are free
+ Advanced services are paid (Similar to RStudio) 
:::
::::

## Why GitHub?

1. A structured way for tracking changes to files over the course of a project.

2. Makes it easy to have multiple people working on the same files at the same time.

3. You can host a URL of fun things (like the class text, these slides, a personal website, etc.) with [GitHub pages](https://pages.github.com/).

*Think "track-changes" or "drop-box" history, but more structured.*

## Git Repositories

+ Think of this as a folder-directory for a single project (like your stat-331 folder!)

```{r}
#| fig-align: center
#| out-width: 20%

knitr::include_graphics("https://miro.medium.com/max/512/1*w07Er4gPg8H2Ew-P0HhxNA.png")
```

+ You may have code, documentation, data, TODO lists, and more associated with a project.

+ To create a repository, you can start with your local computer first, or you can start with the remote (online) repository first.

# Actions in Git

## Cloning a Repo

:::: columns
::: column

Clone = create an exact copy locally

:::
::: column
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("images/git_clone_diagram.png")
```
:::
::::

## Committing

Git tracks changes to each file that it is told to monitor, and as the files change, you provide short labels describing what the changes were and why they exist (called “commits”).

```{r}
#| fig-align: center
#| out-width: 50%
#| fig-cap: "Here, we commit the red line as a change to our file."
knitr::include_graphics("images/git-commit.png")
```

The log of these changes (along with the file history) is called your git commit history. This means you can always go back to old copies!

## Pushing

:::: columns
::: column
Updates the copy of the repository on another machine (e.g. on GitHub) so that it has the most recent changes you’ve made to your machine.
:::
::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_push_diagram.png")
```
:::
::::

## Pulling

:::: columns
::: column
Updates your local copy of the repository (the copy on your computer) with the files that are “in the cloud” (on GitHub). 
:::
::: column
```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/git_pull_diagram.png")
```
:::
::::

## Pushing and Pulling

```{r}
#| fig-align: center
#| out-width: 75%
knitr::include_graphics("images/pushing-and-pulling.jpg")
```

## Merge Conflicts

Occur when you make changes to the same line as a collaborator either at the same time, or without starting from the same "state". 

1. Maybe you are working in real time on the same line of code or text.
2. Maybe you forgot to push your changes last time you finished working.
3. Maybe you forgot to pull your changes before you started working this time.

![](images/same-conflict-pull.jpg)


## Workflow {#git-workflow}

:::: columns
::: column
**Starting a new project/local repo**

::: incremental
1. Clone the project or create a new repository
2. Make some changes
4. Commit the changes
5. Pull any changes from the remote repository
6. Resolve any merge conflicts
7. Push the changes (and merged files)
:::
:::
::: column
:::
::::

## Workflow

:::: columns
::: column
**Starting a new project/local repo**

1. Clone the project or create a new repository
2. Make some changes
4. Commit the changes
5. Pull any changes from the remote repository
6. Resolve any merge conflicts
7. Push the changes (and merged files)
:::
::: column
**Working with an existing local repo**

::: incremental
1. Pull the repo (especially if collaborating)
2. Make some changes
4. Commit the changes
5. Pull any changes from the remote repository (again!)
6. Resolve any merge conflicts
7. Push the changes (and merged files)
:::
:::
::::

# Connect GitHub to RStudio

## Rpackages we will need

Work in your console or a .Rscript for this...

1. Install and load the {usethis} Rpackage

```{r}
#| eval: false
#| echo: true
install.packages("usethis")
library(usethis)
```

2. Install and load {gitcreds} RPackage

```{r}
#| eval: false
#| echo: true
install.packages("gitcreds")
library(gitcreds)
```

## Configure git

3. Tell git your email and username.

```{r}
#| eval: false
#| echo: true
use_git_config(user.name = "JaneDoe2", user.email = "jane@example.org")
```

## Generate your PAT (Personal Access Token)

4. `Generate token`

```{r}
#| eval: false
#| echo: true
create_github_token()
```

```{r}
#| fig-align: center
#| out-width: 60%
knitr::include_graphics("images/pat-generate.jpg")
```

::: callout-warning
GitHub really doesn't like it when you do not have a PAT expiration date... but I don't ever want to deal with it again. Make sure your expiration date is AT LEAST through the end of the quarter (60 days).
:::

## Store your PAT

5. Copy your PAT

```{r}
#| fig-align: center
#| out-width: 70%
knitr::include_graphics("images/pat-copy.jpg")
```


6. `Enter password or token:` Paste PAT

```{r}
#| eval: false
#| echo: true
gitcreds_set()
```

## Verify PAT

You should be good to go! Let's verify.

```{r}
#| echo: true
#| eval: false
git_sitrep()
```

```{r}
#| out-width: 40%
knitr::include_graphics("images/pat-verify.jpg")
```


# PA 6: Merge Conflicts

Collaborating within a GitHub Repo

## Get into your groups!

+ See Canvas for your group number and members (Dr. Robinson also has the list).
+ Introduce yourself by sharing something about your name.
+ Exchange contact information.
+ Grab a set of numbered cards + red/blue/yellow sticky notes

![](images/card-suits.jpg){width="20%"}

Designate each person to one of the suits -- you will be referencing it as you work through this activity.

::: callout-warning
If you only have 3 group members here, assign one person both ![](images/club.jpg){width="3%"} and ![](images/heart.jpg){width="3%"}.

<!-- If you only have 2 group members here, assign one person both ![](images/club.jpg){width="3%"} and ![](images/heart.jpg){width="3%"} and the other person both ![](images/spade.jpg){width="3%"} and ![](images/diamond.jpg){width="3%"}. -->
:::

## Flags

Please use sticky notes to indicate how your group is doing:

+ <p style="background-color:Blue;">Blue</p> -- We are ready to move on
+ <p style="background-color:Yellow;">Yellow</p> -- We're figuring it out
+ <p style="background-color:Red;">Red</p> -- Please help!!

# Repository Setup

##  Creating a Repo (starting from GitHub)

![](images/club.jpg){width="4%"} 

+ Create a new Github repository -- `Repositories` > `New` 
  + Name the repository `stat-331-PA6`
  + You can choose Public or Private
  + Select `.gitignore template: R`
+ Click on the `Settings` tab > Click on `Collaborators` > `Add people`
+ Add your other group members to the repository using their username or email

## Accessing the Repo (remote repo)

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

+ Verify repository invite in your email -- `View invite` > `Accept invite`
+ Open the repository in GitHub -- `github.com/`

## Cloning the Repo (local repo)

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"} 

+ In Rstudio `File` > `New Project` > `Version Control` > `Git` (pause)
+ In GitHub, copy the HTTPS address from the repo `<> Code` and paste into `Repository URL` in RStudio
+ Click `Browse` and navigate to where you want to create your new project. I recommend creating this on your desktop.

::: callout-caution
**Do not** save this within your master stat 331 folder!!! We don't want to embed and Rproject within an RProject.
:::

+ `Create Project`

# Collaborating in GitHub

## Adding Documents to the Repo

![](images/spade.jpg){width="4%"}

+ Create a new Quarto file (using the standard template)
  + Title the document "Practice Activity 6"
  + **Resist** the urge to add author names
  + Save the document as `PA6.qmd` in your `stat-331-PA6` desktop folder
  + Add `self-contained: true` to the YAML
  + Render the document
+ Edit the `.gitignore` file to include `*.Rproj`

## Pushing Documents to the Repo

![](images/spade.jpg){width="4%"}

+ `Git` pane > `Commit` > `Stage` (or checkmark) files > `Commit message` > `Commit`
  + Commit both the `.gitignore` file with an explanatory message such as *"Ignoring all .Rproj files in repo"*
  + Commit the `PA6.qmd`, and `PA6.html` files with an explanatory message such as *"Created practice activity quarto file"*
+ `Push` the changes to the remote repository

## Pulling Changes from the Repo

![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

+ `Git` pane > `Pull` the changes that were made!

Everyone should now have the `.qmd` and `.html` files in their local repos!

## Making a Change

![](images/diamond.jpg){width="4%"} 

+ Add `author:` to the YAML and include everyone's *first* names
+ Render the document
+ `Git` pane > `Commit` > `Stage` (or checkmark) files > `Commit message` > `Commit`
  + Commit the changes with a message such as *"added group first names"*
+ `Push` the changes

## Pushing Changes & Not Pulling

![](images/spade.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

**Do not** pull the changes that were made!

## Making the Same Change

 ![](images/heart.jpg){width="4%"}

+ Add `author:` to the YAML and to include everyone's *first* ***and*** *last names*.
+ Render the document
+ `Git` pane > `Commit` > `Stage` (or checkmark) files > `Commit message` > `Commit`
  + Commit the changes with a message such as *"added group first and last names"*
+ `Push` your changes

::: callout-caution
Oh no `r emo::ji("shocked")` You got an error! Ugh. We forgot to pull before we started making changes `r emo::ji("cry")`
:::

## Forgetting to Pull before you Push

![](images/heart.jpg){width="4%"}

![](images/same-changes-error.jpg)

## Resolving Merge Conflicts

 ![](images/heart.jpg){width="4%"}
 
+ `Pull` the changes from the repo

![](images/same-conflict-pull.jpg)

## Resolving Merge Conflicts

 ![](images/heart.jpg){width="4%"}

![](images/merge-conflict-location-no-HEAD.png)

## Resolving Merge Conflicts

 ![](images/heart.jpg){width="4%"}

+ Review the document with the merge conflict

::: callout-tip
Note how the conflicting lines are marked! You might need to submit this to Canvas `r emo::ji("smile")`
:::

+ Resolve the conflict with the preferred change
+ `Commit` your changes
+ `Push` the changes to the repository

## Pushing Changes & Not Pulling

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"}

**Do not** pull the changes that were made!

## Making Different Changes

![](images/spade.jpg){width="4%"}

+ Change the first code chunk to find the product of 13 times 13.
+ Render the document
+ `Commit` your changes
+ `Push` your changes

::: callout-warning
You will get an error, read it, and **pull**.

No merge conflicts should occur. Now **push** your changes.
:::

## Auto Merge

![](images/auto_merge.png)

## Making Different Changes

 ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}

**Do not** pull the changes that were made!

## Making the Same Changes (Again)

![](images/club.jpg){width="4%"}

+ Change the first code chunk to find the product of 11 times 11.
+ Render the document
+ `Commit` your changes
+ `Push` the changes to the repository

::: callout-caution
You will get an error. Ugh!!!! We forgot to pull again!
:::

## Making the Same Changes (Again)

![](images/club.jpg){width="4%"}

+ `Pull` the changes from the repo
+ Review the document with the merge conflict
+ Clear the merge conflict by choosing the correct/preferred change
+ `Commit` your changes
+ `Push` you changes

## Final Document

![](images/spade.jpg){width="4%"} ![](images/diamond.jpg){width="4%"} ![](images/club.jpg){width="4%"} ![](images/heart.jpg){width="4%"}
 
 `Pull`, and observe the changes in your document.

## Canvas Quiz Submission

::: callout-note
How does Git mark the start of lines with a merge conflict? Specifically, I want the **four capital letter characters** with which every conflict is marked.
:::

## Commit Tips

+ Use relatively short, but also informative commit messages.
+ Commit small blocks of changes. Work to commit every time you’ve accomplished a small task. 
  + You’ll have small, bite-sized changes that are briefly described to serve as a record of what you’ve done (and what still needs doing)
  + When you mess up (or end up in a merge conflict) you will have a much easier time pinpointing the spot where things went bad, what code was there before, and (because you have nice, descriptive commit messages) how the error occurred.

## Tips for avoiding merge conflicts

::: incremental
+ Always **pull** before you start working and always **push** after you are done working!

+ In general, if you follow the [workflow for an existing local repo](#git-workflow) exactly, you only have problems if two of you are making local changes to the same line in the same file at the same time.

+ If you are working with collaborators in real time, **pull**, **commit**, and **push** often.

+ Git commits **lines** -- lines of code, lines of text, etc.
  + Practice good code format and and put each sentence on its own line.
:::

## When all else fails...

Burn your local repo to the ground and clone again.

```{r}
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("https://t3.ftcdn.net/jpg/00/60/10/14/240_F_60101445_pT7VV0oc1OZHeyb4bjzsavtJbPk07kWn.jpg")
```

## To do...

+ **PA 6: Merge Conflicts**
  + Due Thursday, 2/15 at 8:00am

+ **Midterm Exam**
  + Thursday, 2/15
  + Parts 1 & 2 completed during class, Part 3 completed 24 hours after end of class

::: callout-note
+ Office hours extended Wednesday from 1:10am - 3pm.
+ **No** office hours Thursday.
:::
  
+ **Final Project Group Contract**
  + Due Sunday, 2/25 at 11:59pm

## Thursday, February 15th -- Midterm Exam

+ I will pass out a sheet with instructions and questions.
+ Canvas will unlock online midterm material at the beginning of class.

`r praise::praise()`

**To do...**

+ Read **Chapter 7: Writing Functions**
  + Check-in 7.1 due Tuesday 2/20 at 8am

+ **Final Project Group Contract**
  + Due Sunday 2/25 at 11:59pm
  
  