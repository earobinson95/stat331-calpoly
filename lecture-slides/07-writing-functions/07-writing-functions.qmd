---
title: "WEEK 7: WRITING FUNCTIONS"
format: 
  revealjs:
    theme: [default, ../../slide_custom.scss]
    auto-stretch: false
editor: source
self-contained: true
---

```{r setup}
#| include: false
#| message: false
library(tidyverse)
library(flair)
library(palmerpenguins)
```

## Monday, February 20th -- NO CLASS!

I **highly** recommend you...

+ Work through PA 7
+ Read through and begin thinking about Lab 7

## Wednesday, February 22nd

Today we will...

+ Mini lecture on text material
  + Function Basics
  + Environments & Scope
  + Lab 7 Preview
+ Work time:
  + PA 7: Functions
  + Lab 7: Functions & Fish
  + Challenge 7: Incorporating Multiple Inputs
  
## Why write functions?

+ Functions allow you to automate common tasks

+ We've been using functions since Day 1

+ Did you ever find yourself copy-pasting an analysis and changing small parts?

. . .

**Writing your OWN functions has 3 big advantages over copy-and-paste:**

1. Your code is easier to read

2. To change your analysis, simply change the function

3. No more mistakes from copy-paste


# Function Basics

## Function Syntax

<br>

```{r}
#| fig-align: center
#| out-width: 100%
knitr::include_graphics("https://earobinson95.github.io/stat331-calpoly-text/images/07-writing-functions/Annotating_function_syntax.png")
```

## A (very) simple function

```{r my_fun}
#| echo: true
add_two <- function(x) {
  
  x + 2
  
}
```

<br>

Let's call the function!

```{r}
#| echo: true
add_two(5)
```

## Naming functions -- `add_two <- `

The **name** of the function is chosen by the author.

```{r}
#| echo: true
#| eval: false
add_two <- function(x) {
  
  x + 2
  
}
```

. . .

**A word of caution:** Function names have no inherent meaning.

```{r}
#| echo: true
add_three <- function(x) {
  
  x + 7
  
}
```

What did you expect?

```{r}
#| echo: true
add_three(5)
```

## Function Arguments 

The **argument(s)** of the function are chosen by the author.

::: panel-tabset
### `(x)`

:::: columns
::: column
```{r}
#| echo: true
#| eval: false
add_two <- function(x) {
  
  x + 2
  
}
```
:::
::: column

+ arguments are temporary variables with general names

+ `x`, `y`, `z` -- vectors

+ `df` -- dataframe

+ `i`, `j` -- indices
:::
::::

### Optional arguments

We can supply a default argument value -- `something = `

```{r}
#| echo: true
add_something <- function(x, something = 2) {
  
  return(x + something)
  
}
```

`something` defaults to 2

```{r}
#| echo: true
add_something(x = 5)
```

```{r}
#| echo: true
add_something(x = 5, something = 6)
```

### Required arguments

If you **do not** supply a default value, the argument is **required**: -- `something`

```{r}
#| echo: true
#| error: true
add_something <- function(x, something) {
  
  x + something
  
}

add_something(x = 2)
```

:::

## Function `{ body }`

The **body** of the function is where the action happens.

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: 3
add_two <- function(x) {
  
  x + 2
  
}
```

## `return()`

Your function will "give back" whatever would normally "print out".

```{r}
#| echo: true
add_two <- function(x) {
  
  x + 2
  
}
```

<br>

:::: columns
::: column
```{r}
#| echo: true
7 + 2
```
:::
::: column
```{r}
#| echo: true
add_two(7)

```
:::
::::

. . .

You can be explicit (and clearer) by using `return()`

```{r}
#| echo: true
#| eval: false
add_two <- function(x) {
  
  return(x + 2)
  
}
```

## Input validation

::: panel-tabset

### `stopifnot()`
```{r}
#| echo: true
#| error: true
#| code-line-numbers: 3

add_something <- function(x, something) {
  
  stopifnot(is.numeric(x))
  
  x + something
  
}

add_something(x = "statistics", something = 5)
```

### `if() + stop()`
```{r}
#| echo: true
#| error: true
#| code-line-numbers: 3-5
add_something <- function(x, something) {
  
  if(!is.numeric(x)){
    stop("Please provide a numeric input for the x argument.")
  }
  
  x + something
  
}

add_something(x = "statistics", something = 5)
```

### Multiple validations

Recall DeMorgan's law!

```{r}
#| echo: true
#| error: true
#| code-line-numbers: 3-5
add_something <- function(x, something) {
  
  if(!is.numeric(x) | !is.numeric(something)){
    stop("Please provide a numeric inputs for both arguments.")
  }
  
  x + something
  
}

add_something(x = 2, something = "R")
```

:::

## Multiple Conditions



# Environments & Scope

## Environments

+ The top right pane of your RStudio shows you **environment**.
+ This is the "current state" of the objects you've created.

```{r}
#| fig-align: center
#| out-width: 70%
knitr::include_graphics("images/environment.jpg")
```

. . .

+ The code inside the function executes in the **function environment**.
+ It does not change your **global environment**.

## Searching...

:::: columns
::: column
```{r}
#| error: true
#| echo: true
add_two <- function() {
  
  x + 2
  
}

add_two()
```
:::
::: column
```{r}
#| echo: true
x <- 10

add_two()
```
:::
::::

## Function Objects

Objects you make in the function don't affect "real life".

```{r}
#| echo: true
#| code-line-numbers: 3
add_two <- function(x) {
  
  my_result <- x + 2
  
  my_result
  
}
```

Let's assign the variable `my_result` a value in the global environment (outside the function).

```{r}
#| echo: true
my_result <- 2000
```

:::: columns
::: column
Inside the function, the global `my_result` variable is ignored.
```{r}
#| echo: true
add_two(5)
```
:::
::: column
But the global `my_result` variable still exists.
```{r}
#| echo: true
my_result
```
:::
::::

## Name Masking

## Debugging Strategies

## Lab 7 & Challenge 7

[Lab 7: Functions & Fish](https://earobinson95.github.io/stat331-calpoly/lab-assignments/lab7/lab7-functions-and-fish.html)

[Challenge 7: Incorporating Multiple Inputs](https://earobinson95.github.io/stat331-calpoly/lab-assignments/lab7/challenge7-functions-and-fish.html)

```{r}
#| fig-align: center
#| out-width: 60%
knitr::include_graphics("https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/blackfoot_river.jpg?raw=true")
```

## Standardizing Between 0 and 1

```{r}
#| echo: true
std_to_01 <- function(var) {
  stopifnot(is.numeric(var))
  
  num <- var - min(var, na.rm = TRUE)
  denom <- max(var, na.rm = TRUE) - min(var, na.rm = TRUE)
  
  num / denom
}
```

Could our function be more efficient?

## Ugh. Still copy + pasting!

```{r}
#| eval: false
#| echo: true
penguins |> 
  mutate(bill_length_mm    = std_to_01(bill_length_mm), 
         bill_depth_mm     = std_to_01(bill_depth_mm), 
         flipper_length_mm = std_to_01(flipper_length_mm), 
         body_mass_g       = std_to_01(body_mass_g)
  )
```

. . .

Recall `across()`!

```{r}
#| eval: false
#| echo: true
penguins |> 
  mutate(across(.cols = bill_length_mm:body_mass_g,
                ~ std_to_01(.x)
                )
  )
```

## New option: Variables as Arguments!

```{r stdcol}
#| echo: true
#| eval: false
std_column_01 <- function(data, variable) {
  
  stopifnot(is.data.frame(data), 
            is.numeric(variable)
            )
  
  data <- data |> 
    mutate(variable = std_to_01(variable))
  
  data
  
}
```

::: callout-note
Notice how I relied on the existing function `std_to_01()` inside the new
function, for clarity!
:::

. . . 

But it didn't work...

```{r}
#| error: true
#| echo: true
std_column_01(penguins, body_mass_g)
```

## Tidy evaluation

Functions that use **unquoted** variable names as arguments are called
***nonstandard evaluation*** or ***tidy evaluation***.

:::: columns
::: column
**Tidy**:

```{r}
#| echo: true
#| eval: false
penguins |> 
  pull(body_mass_g)
```

<br>

```{r}
#| echo: true
#| eval: false
penguins$body_mass_g
```
:::
::: column
**Untidy**: 

```{r}
#| echo: true
#| eval: false
penguins[, "body_mass_g"]
```

<br>

```{r}
#| echo: true
#| eval: false
penguins[["body_mass_g"]]
```
:::
::::

## Solution 1 `r emo::ji("shrug")`

+ Just don't use tidy evaluations in your functions
+ Harder to read / use, but safe

```{r}
#| echo: true
#| eval: false
std_column_01 <- function(data, variable) {
  
  stopifnot(is.data.frame(data), 
            is.character(variable))
  
  data[[variable]] <- std_to_01(data[[variable]])
  
  data
}

std_column_01(penguins, "bill_length_mm")
```

## Solution 2 -- Embrace Injection `library(rlang)`

:::: {.columns}
::: {.column width="70%"}
In February 2020 `rlang` introduced the "injection" `{{ }}` operator to
simplify writing functions around tidyverse pipelines. 
:::
::: {.column width="30%"}
```{r}
#| fig-align: center
#| out-width: 50%
knitr::include_graphics("https://github.com/rstudio/hex-stickers/blob/main/thumbs/rlang.png?raw=true")
```
:::
::::

With the `{{ }}` operator you can inject the name of data-variables (i.e. 
columns from the data frames) into function arguments! 

::: callout-warning
This only works for `select()` type functions, that use a literal (tidy) name
of the variable to subset the data.
:::

## Recall Our Broken Function

```{r}
#| error: true
#| echo: true
std_column_01 <- function(data, variable) {
  
  data <- data |> 
    mutate(
      variable = std_to_01(variable)
    )
  
  data
  
}

std_column_01(penguins, body_mass_g)
```

+ The problem here is that `mutate()` defuses the R code it was supplied. 
+ Instead we want it to see `body_mass_g = standardize(body_mass_g)`. 

This is why we need injection!

## {{ variable }}

```{r tunnel}
#| error: true
#| echo: true

std_column_01 <- function(data, variable) {
  
  stopifnot(is.data.frame(data))
  
  data <- data 
    mutate({{ variable }} = std_to_01( {{ variable }})
           )
  data
}
```

::: callout-caution
Oh no! What happened?

The left hand side of `=` is also diffused!
:::

## The "Walrus Operator" `:=`

The "walrus operator" `:=` is an alias of `=`.  

You can use it to supply names, e.g. a := b is equivalent to a = b. 

```{r}
#| echo: true
std_column_01 <- function(data, variable) {
  
  stopifnot(is.data.frame(data))
  
  data <- data |>
    mutate({{ variable }} := std_to_01( {{ variable }})
           )
  data
  
}
```

## Don't forget about `across()`

What if I want to modify multiple columns?

```{r}
#| echo: true
std_column_01 <- function(data, variables) {
  
  stopifnot(is.data.frame(data))
  
  data <- data |> 
    mutate(across(.cols = {{ variables }}, 
                  ~ std_to_01(.x)
                  )
           )
  
  data
  
}
```

<br>

```{r}
#| eval: false
#| echo: true
std_column_01(penguins, bill_length_mm:body_mass_g)
```

# Missing Data are important!

## Assumptions when removing missing data

**Without inspection:** 

> Observations are "missing **completely** at random" 

<!-- When observations of a variable are missing completely at random, the missing observations are a random subset of all observations; the missing and observed values will have similar distributions. -->

**With information about the "missingness":** 

> Observations are "missing at random"

<!-- Missing at random means there might be systematic differences between the missing and observed values, but these can be entirely explained by other observed variables. -->

Look for patterns!

## Missing data -- Example

**If** fish length measurements are *missing at random*, conditional on month, year, and river section,

**then** the distributions of lengths will be similar for fish of the same month, year, and river section.

## Scaling Variables

:::: columns
::: column
**Why Scale?**

+ (More) difficult to compare 

+ (More) difficult to model 
:::
::: column
**Why not Scale?**

+ Difficult to interpret
:::
::::

## Interesting reads

[Article on How Building Functions with Variable Names has Changed Over the Years](https://www.bryanshalloway.com/2020/06/25/using-across-to-build-functions-with-dplyr-with-notes-on-legacy-approaches/)

[**rlang** Article on Data Masking ](https://rlang.r-lib.org/reference/topic-data-mask.html)

## To do...

+ **Final Project Group Contract**
  + Due Wednesday 2/22 at 11:59pm
  
+ **PA 7: Functions**
  + Due Wednesday 2/22 at 11:59pm
  
+ **Lab 7: Functions and Fish**
  + Due Friday 2/24 at 11:59pm

+ **Challenge 7: Incorporating Multiple Inputs**
  + Due Saturday 2/25 at 11:59pm
  
+ Read **Chapter 8: Functional Programming**
  + Check-in 8.1 due Monday 2/27 at 8am
  
  