---
title: "Lab 1: Introduction to Quarto"
format: 
  html:
    toc: true
embed-resources: true
theme:
  light: flatly
  dark: darkly
# code-tools: true
execute:
  echo: fenced
---

```{r, setup}
#| include: false
library(tidyverse)
```

## Setup

### Make a Stat 331/531 and Lab 1 Folder `r fontawesome::fa("folder")`

If you have completed *Check-in 1.3*, you have already completed steps 1 & 2.

1.  If you have not already, create a folder on your computer called "stat-331" or similar.

2.  Create an RStudio Project **inside** of this folder.

3.  Inside your Stat 331 folder, work within your existing sub-folder called "week-1" or create a new sub-folder "lab-assignments". Remember, we are trying to be organized and not work out of our Downloads or kitchen sink!

4.  Inside of this sub-folder, create another level of a sub-folder called "lab-1" or similar.

### Create your Lab 1 File `r fontawesome::fa("file")`

To create a Quarto document , you first need to ensure Quarto is installed on your computer. To do this go to the following link <https://quarto.org/docs/get-started/>. You may have already installed Quarto with the newest version of RSTudio during *Check-in 1.3*.

1.  Once you have Quarto installed, open RStudio on your computer.

2.  In RStudio, go to "File" \> "New File" \> "Quarto Document..." and click on "Create" in the dialog box **without changing anything**.

3.  Change the title of your document to be "Lab 1: Introduction to Quarto"

4.  Add additional lines to your YAML header
  + add an `author` line, and include your name
  + add a line with `embed-resources: true`
  + add a line with `code-tools: true`
  + (optional) add a line to specify the `editor` as your preference for either source or visual. I prefer source!

5.  Save the Quarto (.qmd) file as "lab1-intro-to-quarto.qmd" in your "week-1/lab-1" or "labs/lab-1" sub-folder. You can change up the name of your document, but the name **cannot** have spaces and it should describe what the document is.

## Lab Instructions

### Changing the Execution Options `r fontawesome::fa("square")`

Execution options specify how the R code in your Quarto document should be displayed. This guide <https://quarto.org/docs/computations/execution-options.html> provides
descriptions on the options you can specify in a document's execution.

To start, your YAML should look something like this:

```{yaml}
#| echo: true
---
title: "Lab 1: Introduction to Quarto"
author: "Dr. Robinson"
format: html
embed-resources: true
code-tools: true
editor: source (or visual)
---
```

Similar to how you added an `author`, `embed-resources`, (and `editor`) line, you will first need to add an `execute` line to your YAML.

Use the guide above to specify execution options that:

1.   your source code is **always** output on the page
2.   your document will render even if there are errors

### Running the Provided Code `r fontawesome::fa("computer")`

Next, click on the "Play" button on the right of the first auto-populated code chunk. Alternatively, you can highlight (or simply put your cursor on the line of) the code you want to run and type

`ctrl` + `Enter` or `⌘` + `Enter`.

You should see the code appear in the console, as well as the result of the code (`2`). Keep in mind the `[1]` before the `2` is vector notation. This means the result is a *vector* of length 1, whose first element is `2`.

Let's spice this code up a bit. Delete `1 + 1` from the code chunk and write the following code:

```{r}
#| echo: true
# Load the data set into the R Environment
data(ToothGrowth)
# Look at the summary of the variables in the data set.
summary(ToothGrowth)
```

Now run this code. You should see a six-number summary of the variables `len` and `dose` included in the `ToothGrowth` data set as well as the frequency of the levels contained in the `supp` variable. If you inspect environment tab, the `ToothGrowth` data set should appear! You can click on the data set name (not the blue play button!) to inspect the data set.

### Check the data documentation `r fontawesome::fa("circle-question")`

In your **console** (*not* in a Quarto document code chunk), type `?ToothGrowth` (or alternatively `help(ToothGrowth)`.

Use the information that pops up in your *Help* pane in RStudio to fill in the blanks below. Add the questions and your responses *after* the R code chunk. *Before* the code chunk, create a section header (using `#`s) that describes the contents of the section (e.g., Tooth Growth Data Set).

*This data set investigates the effect of ________ on Tooth Growth in _________ ________.*

*The two supplement delivery methods include OJ (______________) and VC (_________ ______)*

*It is a data frame with ____ observations and ____ variables.*

Your Tooth Growth data set section should look something like this:

```{r}
#| out.width: "90%"
#| fig-align: center
#| echo: false
knitr::include_graphics("images/toothgrowth-section.PNG")
```

### Creating a Plot `r fontawesome::fa("chart-line")`

Your second code chunk is just as boring as your first, so let's spice it up! Replace the `2 * 2` code with the following (we will talk about graphics next week!): 

```{r}
#| echo: true
ggplot(data = ToothGrowth, 
       aes(x = supp,
           y = len)
       ) +
  geom_boxplot() +
  labs()
```

Now, run this code chunk! You should see a side-by-side box plot comparing the tooth length between the two supplement delivery methods, contained in the `ToothGrowth` data set.

Look back at the help documentation for the `ToothGrowth` data set to determine what the `len` represents (e.g., "Length of xxx").

Next, look up the help file on the `labs()` ggplot2 function to find the arguments you can use to specify the $x$- and $y$-axis labels. Change the $x$-axis and $y$-axis labels to display reader-friendly axis labels as found in the `ToothGrowth` help file. For example, "Supplement Type" is better than "supp".

Note that `#| echo: false` is an output option applied only to this specific code-chunk. Remove this line so the code shows in your final rendered document.

Create another section header (like you did before) stating what is included in this section.

### Inserting a New Code Chunk `r fontawesome::fa("code")`

Navigate to the last sentence of the Quarto document, we're going to insert a new `R` code chunk at the bottom of the document.

There are four different ways to do this:

1.  type `ctrl` + `alt` + `i` on Windows, or
    `⌘` + `⌥` + `i` on macOS,

2.  Click on the ![](images/add-code-chunk.jpg) symbol in the top right. This should automatically default to R code, but if you have a Python compiler on your computer, you might need to select "R" from the options.

3.  If you are using the Visual editor, then click on the "Insert" button, then select "Code Chunk", and finally select "R".
    
4. Manually add the code chunk by typing ` ```{r}`. Make sure to close your
code chunk with ` ``` `.


```{r}
# We will add code to conduct a t-test here!
```

### Conducting Statistical Analyses `r fontawesome::fa("calculator")`

::: callout-tip
#### Refresher on a two-sample independent t-test

While a second course in statistics is a pre-requisite for this class, you may visit <https://openintro-ims.netlify.app/inference-two-means> for a refresher on conducting two-sample independent t-tests. 
:::

In this section, we are going to conduct a two-sample independent t-test to compare the length between the two supplement methods in the `ToothGrowth` data set. I have outlined the null and alternative hypotheses we will be testing below:

> Null: The population average tooth length for the OJ supplement delivery method is the same as the population average tooth length for the VC supplement delivery method.
>
> Alternative: The population average tooth length for the OJ supplement delivery method is different from the population average tooth length for the VC supplement delivery method.

In the code chunk you created, carry out the following steps:

1. Look up the help documentation for `t.test()`. *Hint: look at the examples at the bottom for comparing extra across groups in the sleep data set.*

2. Using the function `t.test()`, write code to carry out the analysis.
  + You can assume unequal variances and a two-sided alternative.

3. Run your code chunk to obtain the output for your statistical test.

4. Create a **numbered list** containing: 
  + Your conclusion (in context of the data set) based on the p-value.
  + An interpretation of the confidence interval (make sure to read what confidence level is used by default).

5. Create another section header, describing the contents of this section.

### Render your document `r fontawesome::fa("print")`

Render your document as a `.html` file. Use the "Render" button (blue arrow at the top!).

If you run into trouble rendering your document, try restarting your R and running your code chunks again in order, and see if you can find the problem.

Another common issue is deleting the tick marks (```` ``` ````) that surround your code chunks. If you notice that the code chunks are not showing a "Play" button, or that they are not highlighted in gray,
double check your tick marks!

Recall we included `error: true` in our YAML execution options. This means that your document will still render even if there are errors. Make sure you are double checking your work!

### Styling your Quarto Document `r fontawesome::fa("paintbrush")`

You can find a list of every option you can use to format an HTML
document [here](https://quarto.org/docs/output-formats/html-basics.html).

[Here](https://quarto.org/docs/output-formats/html-themes.html) are
lists of different themes you can specify in your YAML which will
produce different styling outputs.

Make the following additional changes to your document:

1.  Specify "code-folding" in your YAML document options.

2.  Specify in the code chunk options that your box-plot of the tooth length by supplement delivery method should be center aligned.

3.  Write and include a figure caption for the box-plot of the `ToothGrowth` data set using a code-chunk option.

You might have fun playing around with other themes or options!

### Render again! `r fontawesome::fa("print")`

Notice that when you render the document, all of the code reruns again, producing the same output as before, but with your changes -- this is called reproducibility `r fontawesome::fa("smile")` !

You should render often while completing your practice activities and lab assignments. Make small changes, then make sure the file still renders rather than making a bunch of big changes and then realizing something is wrong.

### Turn it in! `r fontawesome::fa("check")`

Open the `.html` file on your computer to make sure it looks as you expected. Then upload the rendered (`.html` extension) document to Canvas!

::: callout-caution
Double check that you have `embed-resources: true` in your YAML. Without this, your html will not be formatted correctly on Canvas. You may want to look at what you turn in through your Canvas portal!
:::

> You'll be doing this same process for all your future Lab Assignments and potential Flex Points. Each of these will involve a Quarto file. Some weeks, I may have a template for you to download just as with the first practice activity, but it is good to know how to create one!