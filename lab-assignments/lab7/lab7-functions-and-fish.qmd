---
title: "Lab 7: Functions & Fish"
author: "Your name"
format: 
  html:
    self-contained: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

[Download .qmd starter file](lab7-functions-and-fish.qmd)

[Download `BlackfootFish.csv`](BlackfootFish.csv)

The goal of this lab is learn more about exploring missing data and to teach you to write modular code.

```{r setup}
library(tidyverse)

fish <- read.csv(here::here("lab-assignments", 
                            "lab7", 
                            "BlackfootFish.csv")
                 )
```

## Data Set

This lab's data set concerns mark-recapture data on fish from the Blackfoot River, outside of Helena, Montana.

![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/blackfoot_river.jpg?raw=true)

Mark-recapture is a common method used by Ecologists to estimate an animal population's size, when it is impossible to conduct a census (count every animal). This method works by "tagging" animals with a tracking device, so scientists can track their movement and / or presence.

<center>

::: columns
::: {.column width="25%"}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/grizzly.jpg?raw=true)
:::

::: {.column width="25%"}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/condor.jpg?raw=true)
:::

::: {.column width="25%"}
![](https://github.com/earobinson95/stat331-calpoly/blob/master/lab-assignments/lab7/images/fish.PNG?raw=true)
:::
:::

</center>

## Data Exploration

The measurements of each fish captured were taken by a Biologist on a raft. This lack of "laboratory setting" opens the door to the possibility of measurement errors.

#### 1. Summarizing the Data {-}

Output ONE table to answer the following two questions:

+ How many observations have missing values?
+ What variable(s) have missing values present?

```{r}
# Question 1 code
```

Unfortunately, these missing values are not for only one `year`, `trip`, or `section` of river.

#### 2. Visualizing the Data {-}
Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

```{r}
# Question 2 code
```

## Function Writing: Adjusting the Data

If I wanted to rescale every quantitative variable in my dataset so that the variables have values between 0 and 1. I could use the following formula:

</br>

$$y_{scaled} = \frac{y_i - min\{y_1, y_2,..., y_n\}}{max\{y_1, y_2,..., y_n\} 
- min\{y_1, y_2,..., y_n\}}$$

</br>

The following `R` code would carry out this rescaling procedure for the `length` and `weight` columns of the data:

\vspace{0.25cm}

```{r, echo = TRUE, eval = FALSE}

BlackfootFish <- BlackfootFish |> 
  mutate(length = (length - min(length, na.rm = TRUE)) / 
           (max(length, na.rm = TRUE) - min(length)), 
         weight = (weight - min(weight, na.rm = TRUE)) / 
           (max(weight, na.rm = TRUE) - min(length, na.rm = TRUE))
         )

```

This process of duplicating an action multiple times makes it difficult to understand the intent of the process. Additionally, it makes it very difficult to spot the mistakes. *Did you spot the mistake in the weight conversion?*

Often you will find yourself in the position of needing to find a function that performs a specific task, but you do not know of a function or a library that would help you. You could spend time Googling for a solution, but in the amount of time it takes you to find something you could have already written your own function!

#### 3. Writing a Function {-}

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.
-   The function should return the rescaled vector.

::: callout-tip
Think about the "efficiency" of your function. Are you calling the **same** function multiple times?
:::

```{r}
# Question 3 & 4 code
```

#### 4. Adding Stops {-}

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric
-   the function should stop if the length of the vector is not greater than 1

::: callout-tip
No need to write code here, simply add these stops to your code from Task 1!
:::

#### 5. Performing a Simple Test {-}

First, test your function on the simple vector below. Verify that the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
x <- c(1:25, NA)
```

#### 6. Performing a More Difficult Test {-}

Next, let's test the function on the `length` column of the `BlackfootFish` data set.

Make plots of the original values of `length` and the rescaled values of `length`. Output your plots side-by-side, so the reader can confirm the only aspect that has changed is the scale.

```{r}
# Question 6 plot code
```

#### 7. Incorportaing Variables {-}

Suppose you would like for your `rescale()` function to perform operations on a variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments, (1) a dataframe, and (2) the name(s) of the variable(s) to be rescaled. The body of the function should call the original `rescale_01()` function you wrote previously.

::: callout-tip
If you are struggling with this task, I would recommend reading the [Data frame functions](https://r4ds.hadley.nz/functions.html#data-frame-functions) section from R4DS.
:::

```{r}
# Question 7 code
```

#### 8. Another Function Test {-}

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

::: callout-warning
I expect that you carry out this process by calling the `rescale()` function *one* time!
:::

::: callout-tip
I advise against using functions like `mutate_at()`, which have been superseded.
:::

```{r}
# Question 8 code
```
