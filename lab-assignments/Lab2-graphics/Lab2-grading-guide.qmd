---
title: "Lab 1 & Challenge 1: Grading Guide"
format: html
self-contained: true
toc: true
code-tools: true
---

# Lab 1: Introduction to Quarto (20 pts)

## 1. Changing the YAML (4pts)

1. The title of the document should be "Lab 1: Introduction to Quarto"
2. The author of the document should be their name
3. Includes `self-contained: true`
4. Includes `echo: true`
5. (Optional) `editor: source/visual`

|  4  |  3  |  2  |  1  |  0  |
| ----| --- | --- | --- | --- |
| 4/4 | 3/4 | 2/4 | 1/4 | 0/4 |

`yamlemissingtitle` Don't forget to change the title in the YAML; the title goes in quotes -- title: "Assignment Name Goes Here"

`yamlmissingauthor` Make sure to give yourself credit for the assignment and add your name -- add author: "Your Name Goes Here" to the line under the title within the YAML

`yamlmissingselfcontained` Your plot outputs do not show up; this indicates you are missing the self-contained option in the YAML (specified by the --- at the top of the document) -- add `self-contained: true` to a new line within the YAML.

`yamlmissingecho` Your code output should be showing in the rendered file; this indicates you are missing the echo execution option in the YAML (specified by the --- at the top of the document) -- add a new line with `exectue:` then enter another new line and indent with `echo: true` within the YAML.


## 2. Add a New Section with Content -- Cars Description (4pts)

1. Section header with `# Cars Dataset`
2. `summary(cars)` + output -- speed & dist
3. (1/2 pt each) Description of cars data set-- This data set contains information about **the speed of cars and distances taken to stop**. The data was collected in **the 1920s.**
4. Dimensions of cars data set -- It has **50** rows and **2** variables.

|  4  |  3  |  2  |  1  |  0  |
| ----| --- | --- | --- | --- |
| 4/4 | 3/4 | 2/4 | 1/4 | 0/4 |

`createsectionheader` Use markdown syntax to create a section header; there must be a *space* between the hashtag and header text -- # Section Header Here

`carsmissingdescription` Type ?cars or help(cars) into the RStudio console -- this will tell you about the data set you are working with!

`carsmissingyears` What does the help file say about when the data was collected? Why might this be important information?

`carsmissingdims` It is useful to know the size of the data set you are working with. What does the help file say about the number of rows and variables in the data set?

## 3. Modify the Provided Plot -- Pressure (4pts)

+ section header (+1/2)
+ code shown -- remove `#| echo: false` (+1/2)
+ `plot(pressure)` (+1)
+ x-axis label (temperature) includes "deg C" in title (+1/2 label +1/2 units)
+ y-axis label (pressure) includes "mm" in title (+1/2 label +1/2 units)

`missingsectionheader` It is good to use section headers to organize your output -- this makes it easy to find your work! Use # to create a section header.

`removeecho` In order to display your code in the rendered document, remove the code chunk option *#| echo: false*

`betteraxeslabel` We want our axes labels to be informative and reader friendly -- should there be capitalization? What units should you include?

`missingaxeslabel` It is important to provide informative and reader friendly labels. We often need to change these from the default labels outputting the variable names. We should include units of measurement and any additional information that makes it easy to understand what is being plotted.

`missingaxesunits` When adding axes labels, make sure to include units of measurement!

# 4. Creating a Code Chunk (4pts)

+ Section Header -- Exploring Cars
+ Extract the distance column of the `cars` data set and save it into a new
  object named `dist` -- `dist <- cars[,2]` or `dist <- cars[,"dist"]` (+1)
  
Code chunks for:

+ Plot the distribution of the stopping distances (`dist`). (+1 if histogram/density/boxplot; +1/2 if scatterplot with index)
  + Distribution of stopping distances must be plotted with either a *histogram* 
or a *density* plot
+ *scatterplot* of the relationship between the stopping distance (`dist`) and speed
  (`speed`). (+1)

Plots created have axis labels (+1/2) with units (+1/2)

*Note:* If they use `ggplot()` to plot the distribution of `dist`, then it is
okay if they don't use the `dist` variable that is the vector of extracted
distances. But they must have the code that extracts `dist` regardless of
whether they use it for their plot.

|  4  |  3  |  2  |  1  |  0  |
| ----| --- | --- | --- | --- |
|     |     |     |     |     |

`extractingdist` See the pre-reading for indexing matrices. We want to extract and assign this column to a vector and name that object *dist*.

`extractingdistmultways` There are may ways to extract a column/variable -- cars[,2]; cars[,"dist"]; cars$dist -- These all create a vector we can assign to the object *dist*.

`distnothist` When looking at the distribution of a single numerical variable we want to create either a histogram, density plot, or box-plot.

`carsscatterplot` Look at the help file for plot() -- ?plot or help(plot) -- what arguments does this take?

## 5. Commenting on Plots (4pts)

+ Numbered List
+ Includes at least *two* aspects of the plots they wish they could improve

|  4                                 |            3.5                    |          3                       |      2       |   1      |  0  |
| -----------------------------------| --------------------------------- | -------------------------------- | ------------ | -------- | --- |
| Numbered list with 2 or more items | Needs to hit enter before numbers | 2 items, but not a numbered list |  only 1 item | No items |     |

`greatplotlist` I really like seeing your creativity show as you think about what aspects of the plots you would like to improve!

`enterbeforelist` In order for the markdown syntax to notice a list, you must hit enter in your .qmd file, leaving an empty space between the previous line of text and the start of the list.

# Challenge 1: Modifying your Quarto Document (+10 Challenge Points)

## Code Folding

`nocodefold` Add a new line to your YAML header containing *code-fold: true*. Render your .qmd file to see the changes it makes!

## Center Aligned -- pressure

`usehashpipefigalign` There will be slightly different syntax between Rmarkdown (.Rmd) and Quarto (.qmd) files. In Rmarkdown, *{r, fig.align = 'center'}* is included in defining the code chunk. In Quarto however, we want to use that fancy hashpipe *#| fig-align: center* ! This will have an auto-fill feature making code chunk options simple to use. Make sure you are getting in the habit of using the hashpipe code chunk options (disclaimer: you may be already using the hashpipe -- I just can't tell from the output since this part is not shown in the rendered document)

## Figure Caption -- pressure

`c1figcap` It is good practice to give your figures informative captions about what is being displayed. Quarto documents specify this with a hashpipe: *#| fig-cap: "Put your figure caption here."*

## Side-by-side plots -- cars histogram + cars scatterplot

`carsnotsidebyside` Apparently there is a blogpost that says you should be able to place figures side-by-side with 'hold' and fig.width = "50%". This might be a difference between RMarkdown and Quarto code chunk options. When using base R for plotting, *use par(mfrow = c(1,2))* to change the output window layout to have 1 row and 2 columns. You can then change this back using *par(mfrow = c(1,1))*.

## Additional modification

`specifyquartomod` What additional quarto modification did you make? There are a lot of really cool tips and creative features you can modify in quarto documents!

```{r}
#| fig-alt: 
```
