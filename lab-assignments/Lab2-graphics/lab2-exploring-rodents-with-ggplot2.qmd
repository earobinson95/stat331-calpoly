---
title: "Lab 2: Exploring Rodents with ggplot2"
author: "Your name here!"
format: html
toc: true
self-contained: true
execute:
  echo: true
  message: false
  warning: false
  error: true
---

::: callout-caution
## Seeking Help

Part of learning to program is learning from a variety of resources. Thus, I expect you will use resources beyond the textbook used for this course. However, there is an important balance between copying someone else's code and *using their code to learn*. The [course syllabus](https://earobinson95.github.io/stat331-calpoly/00-course-info/syllabus-W2023.html#academic-integrity-and-class-conduct) defines what is considered plagiarism in this course. Essentially, if you use external resources, I want to know about it. You can "inform" me of any resources you used by pasting the link to the resource in a code comment next to where you used that resource.

You are permitted and encouraged to work with your peers as you complete the lab assignment, but you are expected to do your own work. Copying from each other is cheating, and letting people copy from you is also cheating. Don't do either of those things.
:::

[Download starter .qmd file here.](lab2-exploring-rodents-with-ggplot2)

[Download the data - `surveys.csv` - file here.](surveys.csv)

# Lab Instructions

The questions in this lab are noted with numbers and boldface. Each question will require you produce code, whether it is one line or multiple lines.

This document is quite "plain," meaning it does not have any special formatting. As part of your demonstration of working with Quarto documents, I would encourage you to spice your documents up (e.g., declaring execution options, specifying how your figures should be output, formatting your code output, etc.).

# Set-up

In the code chunk below load in the packages necessary for your analysis. You should only need the `tidyverse` and `here` packages for this analysis, unless you decide to use additional resources.

```{r setup}
# code for loading packages goes here!
```

# Data Context

The Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate. To study the interactions among organisms, we experimentally manipulate access to 24 study plots. This study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.

We will be investigating the animal species diversity and weights found within plots at the Portal study site. The data set is stored as a comma separated value (CSV) file. Each row holds information for a single animal, and the columns represent:

| Column          | Description                        |
|-----------------|------------------------------------|
| `record_id`       | Unique id for the observation      |
| `month`           | month of observation               |
| `day`             | day of observation                 |
| `year`            | year of observation                |
| `plot_id`         | ID of a particular plot            |
| `species_id`      | 2-letter code                      |
| `sex`             | sex of animal ("M", "F")           |
| `hindfoot_length` | length of the hindfoot in mm       |
| `weight`          | weight of the animal in grams      |
| `genus`           | genus of animal                    |
| `species`         | species of animal                  |
| `taxon`           | e.g. Rodent, Reptile, Bird, Rabbit |
| `plot_type`       | type of plot                       |

# Reading the Data into R

**1. Using the `read_csv()` function and the `here` package, write the code necessary to load in the `surveys.csv` dataset. For simplicity, name the data set `surveys`.**

```{r data}
# Code for question 1! 
```

## Inspecting the Data

**2. What are the dimensions of these data?** 

<!-- You can either write code here or in the code chunk for #1, but I **must** see the code you used to address this question!  -->

**3. What are the data types of the variables in the data set?**

<!-- You can either write code here or in the code chunk for #1, but I **must** see the code you used to address this question!  -->

# Plotting with **`ggplot2`**

`ggplot()` graphics are built step by step by adding new elements. Adding layers in this fashion allows for extensive flexibility and customization of plots.

To build a `ggplot()`, we will use the following basic template that can be used for different types of plots:

`ggplot(data = <DATA>, mapping = aes(<VARIABLE MAPPINGS>)) +  <GEOM_FUNCTION>()`

Let's get started!

## Scatterplot

**4. First, let's create a scatterplot of the relationship between `weight` (on the $x$-axis) and `hindfoot_length` (on the $y$-axis).**

```{r scatterplot}
# Code for question 4! 
```

We can see there are **a lot** of points plotted on top of each other. Let's try and modify this plot to extract more information from it.

**5. Let's add transparency (`alpha`) to the points, to make the points more transparent and (possibly) easier to see.**

```{r alpha}
# Code for question 5!
```

## Faceting

Despite our best efforts there is still a substantial amount of overplotting occurring in our scatterplot. Let's try splitting the data set into smaller subsets and see if that allows for us to see the trends a bit better.

**6. Facet your scatterplot by `species`.**

```{r facet}
# Code for question 6
```

## Customization

**7. No plot is complete without axes labels and a title. Include reader friendly labels and a title to your plot.**

```{r labels}
# Code for question 6
```

It takes a larger cognitive load to read text that is rotated. It is common practice in journals and media to move the $y$-axis label to the top of the graph under the title.

**8. Specify your $y$-axis label to be empty and move the $y$-axis label into the subtitle.**

```{r y-axes-label-top}
# Code for question 6
```

## Boxplots {#boxplots}

```{r boxplot-jitter-points}
# Code for question 9 - 13)! :) 
```

**9. Create side-by-side boxplots to visualize the distribution of weight within each species.**

A fundamental complaint of boxplots is that they do not plot the raw data. However, with **ggplot** we can add the raw points on top of the boxplots!

**10. Add another layer to your previous plot (above) that plots each observation.**

Alright, this should look less than optimal. Your points should appear rather stacked on top of each other. To make them less stacked, we need to jitter them a bit, using `geom_jitter()`.

**11. Remove the previous layer you had and include a `geom_jitter()` layer.**

That should look a bit better! But its really hard to see the points when everything is black.

**12. Set the `color` aesthetic in `geom_jitter()` to change the color of the points and add set the `alpha` aesthetic to add alpha blending/transparancy.** 

::: callout-note
You are welcome to use whatever color you wish, some of my favorites are: orange3 and steelblue :)
:::

Great! Now that you can see the points, you should notice something odd: there are two colors of points still being plotted. Some of the observations are being plotted twice, once from `geom_boxplot()` as outliers and again from `geom_jitter()`!

**13. Inspect the help file for `geom_boxplot()` and see how you can remove the outliers from being plotted by `geom_boxplot()`. Make this change in the code above!**

## Customization

Some small changes that make **big** differences to plots. One of these changes are better labels for a plot's axes and legend.

**14. Using the code you created in the [Boxplots](#boxplots) section above, modify the $x$-axis and $y$-axis labels to describe what is being plotted. Be sure to include any necessary units!**

```{r}
# Code for question 14! 
```

Some people (and journals) prefer for boxplots to be stacked with a specific orientation! Let's practice changing the orientation of our boxplots.

**15. Flip the orientation of your boxplots from question 10. If you created side-by-side boxplots (stacked horizontally), your boxplots should be stacked vertically. If you had vertically stacked boxplots, you should stack your boxplots horizontally!**

```{r}
# Code for question 15!
```


Notice how vertically stacked boxplots make the species labels more readable than horizontally stacked boxplots. This is good practice!