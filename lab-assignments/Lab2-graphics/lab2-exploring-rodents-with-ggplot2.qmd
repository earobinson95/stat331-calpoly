---
title: "Lab 2: Exploring Rodents with ggplot2"
author: "Your name here!"
format: html
toc: true
embed-resources: true
code-tools: true
execute:
  echo: true
  message: false
  warning: false
  error: true
---

[Download starter .qmd file here.](lab2-exploring-rodents-with-ggplot2.qmd)

[Download the data - `surveys.csv` - file here.](surveys.csv)

::: callout-tip
Remember to make small changes and Render often!
:::

# Lab Instructions

The questions in this lab are noted with numbers and boldface. Each question will require you produce code, whether it is one line or multiple lines.

This document is quite "plain," meaning it does not have any special formatting. As part of your demonstration of working with Quarto documents, I would encourage you to spice your documents up (e.g., declaring execution options, specifying how your figures should be output, formatting your code output, etc.).

# Set-up

In the code chunk below load in the packages necessary for your analysis. You should only need the `tidyverse` and `here` packages for this analysis, unless you decide to use additional resources.

```{r setup}
# code for loading packages goes here!
```

# Data Context

The Portal Project is a long-term ecological study being conducted near Portal, AZ. Since 1977, the site has been used to study the interactions among rodents, ants and plants and their respective responses to climate. To study the interactions among organisms, we experimentally manipulate access to 24 study plots. This study has produced over 100 scientific papers and is one of the longest running ecological studies in the U.S.

We will be investigating the animal species diversity and weights found within plots at the Portal study site. The data set is stored as a comma separated value (CSV) file. Each row holds information for a single animal, and the columns represent:

| Column          | Description                        |
|-----------------|------------------------------------|
| `record_id`       | Unique id for the observation      |
| `month`           | month of observation               |
| `day`             | day of observation                 |
| `year`            | year of observation                |
| `plot_id`         | ID of a particular plot            |
| `species_id`      | 2-letter code                      |
| `sex`             | sex of animal ("M", "F")           |
| `hindfoot_length` | length of the hindfoot in mm       |
| `weight`          | weight of the animal in grams      |
| `genus`           | genus of animal                    |
| `species`         | species of animal                  |
| `taxon`           | e.g. Rodent, Reptile, Bird, Rabbit |
| `plot_type`       | type of plot                       |

# Reading the Data into R

**1. Using the `read_csv()` function and the `here` package, write the code necessary to load in the `surveys.csv` data set. For simplicity, name the data set `surveys`.**

```{r data}
# Code for question 1! 
```

**2. What are the dimensions of these data?** 

<!-- You can either write code here or in the code chunk for #1, but I **must** see the code you used to address this question!  -->

**3. What are the data types of the variables in the data set?**

<!-- You can either write code here or in the code chunk for #1, but I **must** see the code you used to address this question!  -->

# Exploratory Data Analysis with **`ggplot2`**

`ggplot()` graphics are built step by step by adding new elements. Adding layers in this fashion allows for extensive flexibility and customization of plots.

To build a `ggplot()`, we will use the following basic template that can be used for different types of plots:

```{r}
#| eval: false
ggplot(data = <DATA>, 
       mapping = aes(<VARIABLE MAPPINGS>)
       ) +  
  <GEOM_FUNCTION>()
```

Let's get started!

## Scatterplot

```{r scatterplot}
# Scatter plot code for questions 4-8! 
```

**4. First, let's create a scatterplot of the relationship between `weight` (on the $x$-axis) and `hindfoot_length` (on the $y$-axis).**

We can see there are **a lot** of points plotted on top of each other. Let's try and modify this plot to extract more information from it.

**5. Let's add transparency (`alpha`) to the points, to make the points more transparent and (possibly) easier to see.**

Despite our best efforts there is still a substantial amount of overplotting occurring in our scatterplot. Let's try splitting the data set into smaller subsets and see if that allows for us to see the trends a bit better.

**6. Facet your scatterplot by `species`.**

**7. No plot is complete without axes labels and a title. Include reader friendly labels and a title to your plot.**

It takes a larger cognitive load to read text that is rotated. It is common practice in journals and media to move the $y$-axis label to the top of the graph under the title.

**8. Specify your $y$-axis label to be empty and move the $y$-axis label into the subtitle.** (you can overwrite your code from Q7).

## Boxplots {#boxplots}

```{r boxplot-jitter-points}
# Boxplot code for question 9 - 14.
```

**9. Create side-by-side boxplots to visualize the distribution of weight within each species.** *Note: side-by-side does NOT mean facetting.*

> **a. Sketch a game plan using your favorite tablet sketch tool, paper/pencil, or Excalidraw (link on Canvas). Upload your game plan image here.** This can take on your own flavor/format! The ideas is that you are *thinking* before *coding*. I recommend saving this in the same folder as your .qmd file.

![](file-path/and/name-of-image.png)

> **b. Implement/Code your game plan in the provided code space above.**

A fundamental complaint of boxplots is that they do not plot the raw data. However, with **ggplot** we can add the raw points on top of the boxplots!

**10. Add another layer to your previous plot (above) that plots each observation.**

Alright, this should look less than optimal. Your points should appear rather stacked on top of each other. To make them less stacked, we need to jitter them a bit, using `geom_jitter()`.

**11. Remove the previous layer you had and include a `geom_jitter()` layer.**

That should look a bit better! But its really hard to see the points when everything is black.

**12. Set the `color` aesthetic in `geom_jitter()` to change the color of the points and set the `alpha` aesthetic to add transparency.**

::: callout-note
You are welcome to use whatever color you wish, some of my favorites are: "orange3" and "steelblue"!
:::

Great! Now that you can see the points, you should notice something odd: there are two colors of points still being plotted. Some of the observations are being plotted twice, once from `geom_boxplot()` as outliers and again from `geom_jitter()`!

**13. Inspect the help file for `geom_boxplot()` and see how you can remove the outliers from being plotted by `geom_boxplot()`. Make this change in the code above!**

Some small changes that make **big** differences to plots. One of these changes are better labels for a plot's axes and legend.

**14. Modify the $x$-axis and $y$-axis labels to describe what is being plotted. Be sure to include any necessary units!**

Some people (and journals) prefer for boxplots to be stacked with a specific orientation! Let's practice changing the orientation of our boxplots.

**15. Copy-Paste your boxplot code from above. Flip the orientation of your boxplots. If you created side-by-side boxplots (stacked horizontally), your boxplots should be stacked vertically. If you had vertically stacked boxplots, you should stack your boxplots horizontally!**

```{r}
# Copy-pase boxplot code. Then modfy for question 15!
```

Notice how vertically stacked boxplots make the species labels more readable than horizontally stacked boxplots. This is good practice!

# Conducting Statistical Analyses (ANOVA)

Exploratory Data Analysis (EDA) is always a great start to investigating a data set. Can we see a relationship between rodent weight and hindfoot lenght? How does rodent weight differ between species? We can conduct appropriate statistical analysis methods in R to help us formally investigate what we have learned from our EDA.

In this section, we are going to conduct a one-way ANOVA to compare the mean weight between the fourteen species. 

::: callout-tip
#### Refresher on one-way ANOVA

While a second course in statistics is a pre-requisite for this class, you may visit <https://openintro-ims.netlify.app/inference-many-means> for a refresher on conducting a one-way ANOVA. 
:::

I have outlined the null and alternative hypotheses we will be testing below:

> Null: The population average rodent weight is the same between all fourteen species.
>
> Alternative: At least one species has a different population average rodent weight.

Look up the help documentation for `aov()`.

**16. Using the function `aov()`, complete the code below to carry out the analysis.**

```{r}
species_mod <- aov()
summary(species_mod)
```

**17. Interpret the results of the ANOVA F-test in context of the hypotheses. Make sure to cite appropriate output from above.**

But wait, the `aov()` output doesn't actually tell us which species differ! Install the **emmeans** package by running `install.packages("emmeans")` in your Console (NOT in the .qmd file). Then run the code chunk below to load the package.

```{r}
library(emmeans)
```

Look up the help documentation for `emmeans()`. This one might take a bit of Google-ing. Note we conducted a one-factor model.

**18. Using the `species_mod` from above and the `emmeans()` function, complete the code below to obtain estimated model mean rodent weights for each species**

```{r}
species_estimates <- emmeans()
```

**19. Now that you have obtained the estimated model mean rodent weights. Conduct pairwise comparisons either using the `contrast()` or `pairs()` functions from the *emmeans* package.**

```{r}
# carry out pairwise comparisons between species
```

**20. Look at the pairwise comparison output above, what multiplicity adjustment is used by default? What argument is used to specify the multiplicity adjustment?**
