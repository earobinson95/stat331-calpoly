---
title: "Lab 8: The 12 Days of Christmas"
subtitle: "Sing the Full Song"
author: "Your name"
format: 
  html:
    embed-resources: true
    code-tools: true
    toc: true
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

```{r packages}
#| include: false
library(tidyverse)
xmas <- read.csv("https://github.com/earobinson95/stat331-calpoly/raw/master/practice-activities/data/xmas.csv") |> 
  janitor::clean_names()
```

[Download starter .qmd file](lab8-twelve-days-of-christmas.qmd)

Alright, so you've already created two helper functions, `pluralize_gift()` and `make_phrase()`, which you used at the end of the Practice Activity to create a column of song phrases / lines.

Today, you will use these phrases to write a function which sings the lines of song for a given day. We will then use this function to iterate through the 12 days of Christmas to get our song!

::: callout-note
Note, you will need to copy over your functions from the Practice Activity into your new lab Quarto document.
:::

```{r}
# Copy over functions from your practice activity
```

Use your PA functions to create a `full_phrase` column in the `xmas_phrase` data set.

```{r}
xmas_phrase <- xmas |> 
  mutate(full_phrase = pmap_chr(.l = list(day_num   = ______,
                                          adjective = ______, 
                                          item      = ______, 
                                          verb      = ______, 
                                          location  = ______
                                          ), 
                                .f = make_phrase
                                )
         )
```

::: callout-tip
As you are writing your function, you might want to test them out as a simple case on this data set.
:::

## Iteration.

Write a function called `sing_day()` function that takes as input:

+ A data set (input validation as a `data.frame`)

+ A number indicating which day to sing about (input validation as an `integer`)

+ The name of a column in the data set that contains the phrases for each day (input as a tidy name)

For example,

    sing_day(dataset = xmas_phrase, day_num = 2, phrase_col = full_phrase)

should return

    On the second day of Christmas, my true love sent to me:
    two turtle doves and
    a partridge in a pear tree.

::: callout-tip
**Hint 1:** The `{{ phrase_col }}` part, which I provided for you, lets you use column names as arguments to a function. Don't delete that line of code!

**Hint 2:** The `ordinal()` function from the **english** package could be helpful when converting the `line` input (e.g., 1) to a word (e.g., "first").
:::

```{r sing-day-function}
# Produces the string for one day of the song.
# Arguments -- dataset -- A data frame containing information about gifts
# Arguments -- day_num -- The number of the day you want to sing about
# Arguments -- phrase_col -- The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.

sing_day <- function(dataset, day_num, phrase_col){
  
  # Step 1: Setup the intro line
  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)
  num_word <- ____
  
  intro <- str_glue("On the {num_word} day of Christmas, my true love sent to me:")
  
  # Step 2: Sing the gift phrases
  # Hint: What order are they gifts sung in each day?
  # This should just be one pipeline

    phrases <- dataset |>
      pull({{ phrase_col }})

  ????
    
  ## put the intro and phrases together
    
  ????

}

```

::: callout-note
### A Small Test

```{r}
sing_day(dataset    = xmas_phrase,
         day_num    = 3,
         phrase_col = full_phrase
         )
```
:::

## Use Your Functions!

Complete and run the following code to test out your functions! The output should be the lyrics for the entire 12 Days of Christmas song.

```{r}
map_chr(.x = # vector of days 1 - 12 to iterate over, will be passed in to day_num 
        .f = ~ sing_day(dataset = ___________, 
                        day_num = _____, # placeholder for mapping the vector over 
                        phrase_col = __________
                        )
        ) |>
  str_flatten(collapse = "\n") |>
  cat()
```

::: callout-warning
**You will get automatic deductions for:**

+ Functions that do not work the way they are intended
+ "Hard-Coding" in functions.
+ Not using the `map()` code supplied for you to iterate the function you just wrote.
+ Not singing the full song. Remember, each day, you get the gift for that day *and* all the prior days.
:::

## (Optional) Style your song [max +9 FP]

::: callout-note
Even if you included these changes in the lab submission, submit to the **FP** Canvas portal.
:::

You can select which of the following you wish to complete. See Canvas rubric.

1. Remove any additional spaces between words, such that there should only be **one** whitespace character between words and **no** whitespace at the beginning or end of each phrase.

2. Ensure each phase (e.g., "two turtle doves") of your song is printed on its own line. For example, your function should output the following for `sing_line(xmas, num = 2, phrase_col = Full.Phrase)`:

    On the second day of Christmas, my true love gave to me: 
    two turtle doves and 
    a partridge in a pear tree

3. Ensure there are blank spaces between the different lines of the song. For example, when iterating your function, your output should look like the following:

    On the second day of Christmas, my true love gave to me: 
    two turtle doves and 
    a partridge in a pear tree

    On the first day of Christmas, my true love gave to me:
    a partridge in a pear tree

4. Ensure the lines of your song are grammatically correct. There are three components you should address in making your lines grammatically correct:

+ Use of Commas -- each line should end in a comma *except* for the last line
+ Use of And -- there should be an "and" included *either* at the [end]{.underline} of the second to last line *or* at the [beginning]{.underline} of the final line
+ Use of Period -- there should be a period at the end of the final line

For example, your function should output the following for `sing_line(xmas, num = 3, phrase_col = Full.Phrase)`:

    On the third day of Christmas, my true love gave to me: 
    three french hens, 
    two turtle doves, and 
    a partridge in a pear tree.

::: callout-note
While I am a fan of the oxford comma, you do not have to use an oxford comma for the second to last phrase of your song.
:::

