---
title: "Bonus Challenge 0: FizzBuzz (+5)"
author: "NAME"
date: ""
format: html
self-contained: true
code-fold: true
editor: source
execute: 
  echo: true
  error: true
---

Create a new Quarto document (`File > New File > Quarto Document`) and [copy the starter qmd file here](https://raw.githubusercontent.com/earobinson95/stat331-calpoly/master/bonus-challenges/bonus-challenge-0-fizzbuzz.qmd?token=GHSAT0AAAAAABYBOW2KIQXJITYXJTZ2EYV2Y53GJRQ). *Make sure you are on Source editor mode and not Visual editor mode when you copy the starter file.*


## FizzBuzz

The "FizzBuzz Test" is a famous programming interview question. 
> Write a program that prints the numbers from 1 to 30. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz"


### Program Flow Map

Create a program flow map (on paper, or using an online tool of your choice, such as [Excalidraw](https://excalidraw.com/)) showing how FizzBuzz should be evaluated for a given integer x. You do not need to worry about the for loop in this program flow map. Upload your program flow map image to [imgur.com](https://imgur.com/) and provide an image link here using markdown image syntax. You will need to link directly to the image (with image file extension) - right click on your uploaded image and choose 'copy image address' to get the proper link.


Can you think of another way to solve FizzBuzz using a different logical structure? What do you need to know how to do in R/python for each solution? Do you need to know how to concatenate strings? Convert something from an integer to a string? Just output stuff to the command line? Thinking through these requirements can help you decide which solution is the simplest and/or best. 

List out the requirements of the solution in your program flow map here: 

### R Solution (+4)

In the `R` chunk below, write code which will solve this problem using a for loop that goes from 1 to 30.

```{r fizzbuzz-logic}
# Write your code here.
```

Each logical comparison can take some time to evaluate. How many logical comparisons are evaluated in your for loop? Can you count them up? For instance, if your if-elseif-else statement is TRUE on the first if statement, then the second logical comparison is not evaluated, but if it is FALSE for the first comparison, then the second comparison does get evaluated. Thinking about efficiency is one way to evaluate whether code is well-written or not.

Number of logical comparisons: 


### Extra Challenge (+1)

Can you use string concatenation to produce a solution that has only 3 single if statements (that is, one that doesn't use nested if statements or an if-else construction)? This may be different from the way you constructed your solution, and that's good - there are many ways to solve this problem.

```{r fizzbuzz-logic-challenge}
# Write your code here.
```
